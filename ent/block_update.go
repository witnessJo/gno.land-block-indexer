// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gno.land-block-indexer/ent/block"
	"gno.land-block-indexer/ent/predicate"
	"gno.land-block-indexer/ent/transaction"
)

// BlockUpdate is the builder for updating Block entities.
type BlockUpdate struct {
	config
	hooks    []Hook
	mutation *BlockMutation
}

// Where appends a list predicates to the BlockUpdate builder.
func (_u *BlockUpdate) Where(ps ...predicate.Block) *BlockUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetHash sets the "hash" field.
func (_u *BlockUpdate) SetHash(v string) *BlockUpdate {
	_u.mutation.SetHash(v)
	return _u
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (_u *BlockUpdate) SetNillableHash(v *string) *BlockUpdate {
	if v != nil {
		_u.SetHash(*v)
	}
	return _u
}

// SetHeight sets the "height" field.
func (_u *BlockUpdate) SetHeight(v int) *BlockUpdate {
	_u.mutation.ResetHeight()
	_u.mutation.SetHeight(v)
	return _u
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (_u *BlockUpdate) SetNillableHeight(v *int) *BlockUpdate {
	if v != nil {
		_u.SetHeight(*v)
	}
	return _u
}

// AddHeight adds value to the "height" field.
func (_u *BlockUpdate) AddHeight(v int) *BlockUpdate {
	_u.mutation.AddHeight(v)
	return _u
}

// SetTime sets the "time" field.
func (_u *BlockUpdate) SetTime(v time.Time) *BlockUpdate {
	_u.mutation.SetTime(v)
	return _u
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_u *BlockUpdate) SetNillableTime(v *time.Time) *BlockUpdate {
	if v != nil {
		_u.SetTime(*v)
	}
	return _u
}

// SetTotalTxs sets the "total_txs" field.
func (_u *BlockUpdate) SetTotalTxs(v int) *BlockUpdate {
	_u.mutation.ResetTotalTxs()
	_u.mutation.SetTotalTxs(v)
	return _u
}

// SetNillableTotalTxs sets the "total_txs" field if the given value is not nil.
func (_u *BlockUpdate) SetNillableTotalTxs(v *int) *BlockUpdate {
	if v != nil {
		_u.SetTotalTxs(*v)
	}
	return _u
}

// AddTotalTxs adds value to the "total_txs" field.
func (_u *BlockUpdate) AddTotalTxs(v int) *BlockUpdate {
	_u.mutation.AddTotalTxs(v)
	return _u
}

// SetNumTxs sets the "num_txs" field.
func (_u *BlockUpdate) SetNumTxs(v int) *BlockUpdate {
	_u.mutation.ResetNumTxs()
	_u.mutation.SetNumTxs(v)
	return _u
}

// SetNillableNumTxs sets the "num_txs" field if the given value is not nil.
func (_u *BlockUpdate) SetNillableNumTxs(v *int) *BlockUpdate {
	if v != nil {
		_u.SetNumTxs(*v)
	}
	return _u
}

// AddNumTxs adds value to the "num_txs" field.
func (_u *BlockUpdate) AddNumTxs(v int) *BlockUpdate {
	_u.mutation.AddNumTxs(v)
	return _u
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (_u *BlockUpdate) AddTransactionIDs(ids ...int) *BlockUpdate {
	_u.mutation.AddTransactionIDs(ids...)
	return _u
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (_u *BlockUpdate) AddTransactions(v ...*Transaction) *BlockUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTransactionIDs(ids...)
}

// Mutation returns the BlockMutation object of the builder.
func (_u *BlockUpdate) Mutation() *BlockMutation {
	return _u.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (_u *BlockUpdate) ClearTransactions() *BlockUpdate {
	_u.mutation.ClearTransactions()
	return _u
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (_u *BlockUpdate) RemoveTransactionIDs(ids ...int) *BlockUpdate {
	_u.mutation.RemoveTransactionIDs(ids...)
	return _u
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (_u *BlockUpdate) RemoveTransactions(v ...*Transaction) *BlockUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockUpdate) check() error {
	if v, ok := _u.mutation.Hash(); ok {
		if err := block.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Block.hash": %w`, err)}
		}
	}
	return nil
}

func (_u *BlockUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(block.Table, block.Columns, sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Hash(); ok {
		_spec.SetField(block.FieldHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.Height(); ok {
		_spec.SetField(block.FieldHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedHeight(); ok {
		_spec.AddField(block.FieldHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Time(); ok {
		_spec.SetField(block.FieldTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.TotalTxs(); ok {
		_spec.SetField(block.FieldTotalTxs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalTxs(); ok {
		_spec.AddField(block.FieldTotalTxs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.NumTxs(); ok {
		_spec.SetField(block.FieldNumTxs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedNumTxs(); ok {
		_spec.AddField(block.FieldNumTxs, field.TypeInt, value)
	}
	if _u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.TransactionsTable,
			Columns: []string{block.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !_u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.TransactionsTable,
			Columns: []string{block.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.TransactionsTable,
			Columns: []string{block.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockUpdateOne is the builder for updating a single Block entity.
type BlockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockMutation
}

// SetHash sets the "hash" field.
func (_u *BlockUpdateOne) SetHash(v string) *BlockUpdateOne {
	_u.mutation.SetHash(v)
	return _u
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (_u *BlockUpdateOne) SetNillableHash(v *string) *BlockUpdateOne {
	if v != nil {
		_u.SetHash(*v)
	}
	return _u
}

// SetHeight sets the "height" field.
func (_u *BlockUpdateOne) SetHeight(v int) *BlockUpdateOne {
	_u.mutation.ResetHeight()
	_u.mutation.SetHeight(v)
	return _u
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (_u *BlockUpdateOne) SetNillableHeight(v *int) *BlockUpdateOne {
	if v != nil {
		_u.SetHeight(*v)
	}
	return _u
}

// AddHeight adds value to the "height" field.
func (_u *BlockUpdateOne) AddHeight(v int) *BlockUpdateOne {
	_u.mutation.AddHeight(v)
	return _u
}

// SetTime sets the "time" field.
func (_u *BlockUpdateOne) SetTime(v time.Time) *BlockUpdateOne {
	_u.mutation.SetTime(v)
	return _u
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_u *BlockUpdateOne) SetNillableTime(v *time.Time) *BlockUpdateOne {
	if v != nil {
		_u.SetTime(*v)
	}
	return _u
}

// SetTotalTxs sets the "total_txs" field.
func (_u *BlockUpdateOne) SetTotalTxs(v int) *BlockUpdateOne {
	_u.mutation.ResetTotalTxs()
	_u.mutation.SetTotalTxs(v)
	return _u
}

// SetNillableTotalTxs sets the "total_txs" field if the given value is not nil.
func (_u *BlockUpdateOne) SetNillableTotalTxs(v *int) *BlockUpdateOne {
	if v != nil {
		_u.SetTotalTxs(*v)
	}
	return _u
}

// AddTotalTxs adds value to the "total_txs" field.
func (_u *BlockUpdateOne) AddTotalTxs(v int) *BlockUpdateOne {
	_u.mutation.AddTotalTxs(v)
	return _u
}

// SetNumTxs sets the "num_txs" field.
func (_u *BlockUpdateOne) SetNumTxs(v int) *BlockUpdateOne {
	_u.mutation.ResetNumTxs()
	_u.mutation.SetNumTxs(v)
	return _u
}

// SetNillableNumTxs sets the "num_txs" field if the given value is not nil.
func (_u *BlockUpdateOne) SetNillableNumTxs(v *int) *BlockUpdateOne {
	if v != nil {
		_u.SetNumTxs(*v)
	}
	return _u
}

// AddNumTxs adds value to the "num_txs" field.
func (_u *BlockUpdateOne) AddNumTxs(v int) *BlockUpdateOne {
	_u.mutation.AddNumTxs(v)
	return _u
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (_u *BlockUpdateOne) AddTransactionIDs(ids ...int) *BlockUpdateOne {
	_u.mutation.AddTransactionIDs(ids...)
	return _u
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (_u *BlockUpdateOne) AddTransactions(v ...*Transaction) *BlockUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTransactionIDs(ids...)
}

// Mutation returns the BlockMutation object of the builder.
func (_u *BlockUpdateOne) Mutation() *BlockMutation {
	return _u.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (_u *BlockUpdateOne) ClearTransactions() *BlockUpdateOne {
	_u.mutation.ClearTransactions()
	return _u
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (_u *BlockUpdateOne) RemoveTransactionIDs(ids ...int) *BlockUpdateOne {
	_u.mutation.RemoveTransactionIDs(ids...)
	return _u
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (_u *BlockUpdateOne) RemoveTransactions(v ...*Transaction) *BlockUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the BlockUpdate builder.
func (_u *BlockUpdateOne) Where(ps ...predicate.Block) *BlockUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockUpdateOne) Select(field string, fields ...string) *BlockUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Block entity.
func (_u *BlockUpdateOne) Save(ctx context.Context) (*Block, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockUpdateOne) SaveX(ctx context.Context) *Block {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockUpdateOne) check() error {
	if v, ok := _u.mutation.Hash(); ok {
		if err := block.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Block.hash": %w`, err)}
		}
	}
	return nil
}

func (_u *BlockUpdateOne) sqlSave(ctx context.Context) (_node *Block, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(block.Table, block.Columns, sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Block.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, block.FieldID)
		for _, f := range fields {
			if !block.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != block.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Hash(); ok {
		_spec.SetField(block.FieldHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.Height(); ok {
		_spec.SetField(block.FieldHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedHeight(); ok {
		_spec.AddField(block.FieldHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Time(); ok {
		_spec.SetField(block.FieldTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.TotalTxs(); ok {
		_spec.SetField(block.FieldTotalTxs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalTxs(); ok {
		_spec.AddField(block.FieldTotalTxs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.NumTxs(); ok {
		_spec.SetField(block.FieldNumTxs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedNumTxs(); ok {
		_spec.AddField(block.FieldNumTxs, field.TypeInt, value)
	}
	if _u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.TransactionsTable,
			Columns: []string{block.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !_u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.TransactionsTable,
			Columns: []string{block.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.TransactionsTable,
			Columns: []string{block.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Block{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
