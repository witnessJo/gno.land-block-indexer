// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gno.land-block-indexer/ent/block"
	"gno.land-block-indexer/ent/schema"
	"gno.land-block-indexer/ent/transaction"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
}

// SetIndex sets the "index" field.
func (_c *TransactionCreate) SetIndex(v int) *TransactionCreate {
	_c.mutation.SetIndex(v)
	return _c
}

// SetHash sets the "hash" field.
func (_c *TransactionCreate) SetHash(v string) *TransactionCreate {
	_c.mutation.SetHash(v)
	return _c
}

// SetSuccess sets the "success" field.
func (_c *TransactionCreate) SetSuccess(v bool) *TransactionCreate {
	_c.mutation.SetSuccess(v)
	return _c
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_c *TransactionCreate) SetNillableSuccess(v *bool) *TransactionCreate {
	if v != nil {
		_c.SetSuccess(*v)
	}
	return _c
}

// SetBlockHeight sets the "block_height" field.
func (_c *TransactionCreate) SetBlockHeight(v int) *TransactionCreate {
	_c.mutation.SetBlockHeight(v)
	return _c
}

// SetGasWanted sets the "gas_wanted" field.
func (_c *TransactionCreate) SetGasWanted(v float64) *TransactionCreate {
	_c.mutation.SetGasWanted(v)
	return _c
}

// SetGasUsed sets the "gas_used" field.
func (_c *TransactionCreate) SetGasUsed(v float64) *TransactionCreate {
	_c.mutation.SetGasUsed(v)
	return _c
}

// SetMemo sets the "memo" field.
func (_c *TransactionCreate) SetMemo(v string) *TransactionCreate {
	_c.mutation.SetMemo(v)
	return _c
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (_c *TransactionCreate) SetNillableMemo(v *string) *TransactionCreate {
	if v != nil {
		_c.SetMemo(*v)
	}
	return _c
}

// SetGasFee sets the "gas_fee" field.
func (_c *TransactionCreate) SetGasFee(v schema.GasFee) *TransactionCreate {
	_c.mutation.SetGasFee(v)
	return _c
}

// SetNillableGasFee sets the "gas_fee" field if the given value is not nil.
func (_c *TransactionCreate) SetNillableGasFee(v *schema.GasFee) *TransactionCreate {
	if v != nil {
		_c.SetGasFee(*v)
	}
	return _c
}

// SetMessages sets the "messages" field.
func (_c *TransactionCreate) SetMessages(v []schema.Message) *TransactionCreate {
	_c.mutation.SetMessages(v)
	return _c
}

// SetResponse sets the "response" field.
func (_c *TransactionCreate) SetResponse(v schema.Response) *TransactionCreate {
	_c.mutation.SetResponse(v)
	return _c
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (_c *TransactionCreate) SetNillableResponse(v *schema.Response) *TransactionCreate {
	if v != nil {
		_c.SetResponse(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *TransactionCreate) SetCreatedAt(v time.Time) *TransactionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TransactionCreate) SetNillableCreatedAt(v *time.Time) *TransactionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetBlockID sets the "block" edge to the Block entity by ID.
func (_c *TransactionCreate) SetBlockID(id int) *TransactionCreate {
	_c.mutation.SetBlockID(id)
	return _c
}

// SetNillableBlockID sets the "block" edge to the Block entity by ID if the given value is not nil.
func (_c *TransactionCreate) SetNillableBlockID(id *int) *TransactionCreate {
	if id != nil {
		_c = _c.SetBlockID(*id)
	}
	return _c
}

// SetBlock sets the "block" edge to the Block entity.
func (_c *TransactionCreate) SetBlock(v *Block) *TransactionCreate {
	return _c.SetBlockID(v.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (_c *TransactionCreate) Mutation() *TransactionMutation {
	return _c.mutation
}

// Save creates the Transaction in the database.
func (_c *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TransactionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TransactionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TransactionCreate) defaults() {
	if _, ok := _c.mutation.Success(); !ok {
		v := transaction.DefaultSuccess
		_c.mutation.SetSuccess(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := transaction.DefaultCreatedAt
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TransactionCreate) check() error {
	if _, ok := _c.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "Transaction.index"`)}
	}
	if _, ok := _c.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Transaction.hash"`)}
	}
	if v, ok := _c.mutation.Hash(); ok {
		if err := transaction.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Transaction.hash": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Success(); !ok {
		return &ValidationError{Name: "success", err: errors.New(`ent: missing required field "Transaction.success"`)}
	}
	if _, ok := _c.mutation.BlockHeight(); !ok {
		return &ValidationError{Name: "block_height", err: errors.New(`ent: missing required field "Transaction.block_height"`)}
	}
	if _, ok := _c.mutation.GasWanted(); !ok {
		return &ValidationError{Name: "gas_wanted", err: errors.New(`ent: missing required field "Transaction.gas_wanted"`)}
	}
	if _, ok := _c.mutation.GasUsed(); !ok {
		return &ValidationError{Name: "gas_used", err: errors.New(`ent: missing required field "Transaction.gas_used"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Transaction.created_at"`)}
	}
	return nil
}

func (_c *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(transaction.Table, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Index(); ok {
		_spec.SetField(transaction.FieldIndex, field.TypeInt, value)
		_node.Index = value
	}
	if value, ok := _c.mutation.Hash(); ok {
		_spec.SetField(transaction.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := _c.mutation.Success(); ok {
		_spec.SetField(transaction.FieldSuccess, field.TypeBool, value)
		_node.Success = value
	}
	if value, ok := _c.mutation.BlockHeight(); ok {
		_spec.SetField(transaction.FieldBlockHeight, field.TypeInt, value)
		_node.BlockHeight = value
	}
	if value, ok := _c.mutation.GasWanted(); ok {
		_spec.SetField(transaction.FieldGasWanted, field.TypeFloat64, value)
		_node.GasWanted = value
	}
	if value, ok := _c.mutation.GasUsed(); ok {
		_spec.SetField(transaction.FieldGasUsed, field.TypeFloat64, value)
		_node.GasUsed = value
	}
	if value, ok := _c.mutation.Memo(); ok {
		_spec.SetField(transaction.FieldMemo, field.TypeString, value)
		_node.Memo = value
	}
	if value, ok := _c.mutation.GasFee(); ok {
		_spec.SetField(transaction.FieldGasFee, field.TypeJSON, value)
		_node.GasFee = value
	}
	if value, ok := _c.mutation.Messages(); ok {
		_spec.SetField(transaction.FieldMessages, field.TypeJSON, value)
		_node.Messages = value
	}
	if value, ok := _c.mutation.Response(); ok {
		_spec.SetField(transaction.FieldResponse, field.TypeJSON, value)
		_node.Response = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.BlockTable,
			Columns: []string{transaction.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.block_transactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	err      error
	builders []*TransactionCreate
}

// Save creates the Transaction entities in the database.
func (_c *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Transaction, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
