// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gno.land-block-indexer/ent/account"
	"gno.land-block-indexer/ent/transfer"
)

// Transfer is the model entity for the Transfer schema.
type Transfer struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the transfer used as primary key
	ID int `json:"id,omitempty"`
	// Address of the sender
	FromAddress string `json:"from_address,omitempty"`
	// Address of the receiver
	ToAddress string `json:"to_address,omitempty"`
	// Token associated with the transfer
	Token string `json:"token,omitempty"`
	// Amount transferred
	Amount float64 `json:"amount,omitempty"`
	// Denomination of the transferred amount
	Denom string `json:"denom,omitempty"`
	// Creation time of the transfer
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransferQuery when eager-loading is set.
	Edges             TransferEdges `json:"edges"`
	account_transfers *string
	selectValues      sql.SelectValues
}

// TransferEdges holds the relations/edges for other nodes in the graph.
type TransferEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransferEdges) AccountOrErr() (*Account, error) {
	if e.Account != nil {
		return e.Account, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: account.Label}
	}
	return nil, &NotLoadedError{edge: "account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transfer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transfer.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case transfer.FieldID:
			values[i] = new(sql.NullInt64)
		case transfer.FieldFromAddress, transfer.FieldToAddress, transfer.FieldToken, transfer.FieldDenom:
			values[i] = new(sql.NullString)
		case transfer.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case transfer.ForeignKeys[0]: // account_transfers
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transfer fields.
func (_m *Transfer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transfer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case transfer.FieldFromAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_address", values[i])
			} else if value.Valid {
				_m.FromAddress = value.String
			}
		case transfer.FieldToAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_address", values[i])
			} else if value.Valid {
				_m.ToAddress = value.String
			}
		case transfer.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				_m.Token = value.String
			}
		case transfer.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				_m.Amount = value.Float64
			}
		case transfer.FieldDenom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field denom", values[i])
			} else if value.Valid {
				_m.Denom = value.String
			}
		case transfer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case transfer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_transfers", values[i])
			} else if value.Valid {
				_m.account_transfers = new(string)
				*_m.account_transfers = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transfer.
// This includes values selected through modifiers, order, etc.
func (_m *Transfer) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAccount queries the "account" edge of the Transfer entity.
func (_m *Transfer) QueryAccount() *AccountQuery {
	return NewTransferClient(_m.config).QueryAccount(_m)
}

// Update returns a builder for updating this Transfer.
// Note that you need to call Transfer.Unwrap() before calling this method if this Transfer
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Transfer) Update() *TransferUpdateOne {
	return NewTransferClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Transfer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Transfer) Unwrap() *Transfer {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transfer is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Transfer) String() string {
	var builder strings.Builder
	builder.WriteString("Transfer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("from_address=")
	builder.WriteString(_m.FromAddress)
	builder.WriteString(", ")
	builder.WriteString("to_address=")
	builder.WriteString(_m.ToAddress)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(_m.Token)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteString(", ")
	builder.WriteString("denom=")
	builder.WriteString(_m.Denom)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Transfers is a parsable slice of Transfer.
type Transfers []*Transfer
