// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "address", Type: field.TypeString},
		{Name: "token", Type: field.TypeString},
		{Name: "amount", Type: field.TypeFloat64},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
	}
	// BlocksColumns holds the columns for the "blocks" table.
	BlocksColumns = []*schema.Column{
		{Name: "height", Type: field.TypeInt, Increment: true},
		{Name: "hash", Type: field.TypeString},
		{Name: "time", Type: field.TypeTime},
		{Name: "total_txs", Type: field.TypeInt},
		{Name: "num_txs", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
	}
	// BlocksTable holds the schema information for the "blocks" table.
	BlocksTable = &schema.Table{
		Name:       "blocks",
		Columns:    BlocksColumns,
		PrimaryKey: []*schema.Column{BlocksColumns[0]},
	}
	// RestoreHistoriesColumns holds the columns for the "restore_histories" table.
	RestoreHistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "restore_range_start", Type: field.TypeInt},
		{Name: "restore_range_end", Type: field.TypeInt},
		{Name: "being_block", Type: field.TypeInt},
	}
	// RestoreHistoriesTable holds the schema information for the "restore_histories" table.
	RestoreHistoriesTable = &schema.Table{
		Name:       "restore_histories",
		Columns:    RestoreHistoriesColumns,
		PrimaryKey: []*schema.Column{RestoreHistoriesColumns[0]},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "index", Type: field.TypeInt},
		{Name: "hash", Type: field.TypeString},
		{Name: "success", Type: field.TypeBool, Default: false},
		{Name: "block_height", Type: field.TypeInt},
		{Name: "gas_wanted", Type: field.TypeFloat64},
		{Name: "gas_used", Type: field.TypeFloat64},
		{Name: "memo", Type: field.TypeString, Nullable: true},
		{Name: "gas_fee", Type: field.TypeJSON, Nullable: true},
		{Name: "messages", Type: field.TypeJSON, Nullable: true},
		{Name: "response", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "account_transactions", Type: field.TypeString, Nullable: true},
		{Name: "block_transactions", Type: field.TypeInt, Nullable: true},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transactions_accounts_transactions",
				Columns:    []*schema.Column{TransactionsColumns[12]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "transactions_blocks_transactions",
				Columns:    []*schema.Column{TransactionsColumns[13]},
				RefColumns: []*schema.Column{BlocksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TransfersColumns holds the columns for the "transfers" table.
	TransfersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "from_address", Type: field.TypeString},
		{Name: "to_address", Type: field.TypeString},
		{Name: "token", Type: field.TypeString},
		{Name: "amount", Type: field.TypeFloat64},
		{Name: "denom", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "account_transfers", Type: field.TypeString, Nullable: true},
	}
	// TransfersTable holds the schema information for the "transfers" table.
	TransfersTable = &schema.Table{
		Name:       "transfers",
		Columns:    TransfersColumns,
		PrimaryKey: []*schema.Column{TransfersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transfers_accounts_transfers",
				Columns:    []*schema.Column{TransfersColumns[7]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		BlocksTable,
		RestoreHistoriesTable,
		TransactionsTable,
		TransfersTable,
	}
)

func init() {
	TransactionsTable.ForeignKeys[0].RefTable = AccountsTable
	TransactionsTable.ForeignKeys[1].RefTable = BlocksTable
	TransfersTable.ForeignKeys[0].RefTable = AccountsTable
}
