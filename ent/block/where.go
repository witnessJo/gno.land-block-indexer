// Code generated by ent, DO NOT EDIT.

package block

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gno.land-block-indexer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldID, id))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldHash, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTime, v))
}

// TotalTxs applies equality check predicate on the "total_txs" field. It's identical to TotalTxsEQ.
func TotalTxs(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTotalTxs, v))
}

// NumTxs applies equality check predicate on the "num_txs" field. It's identical to NumTxsEQ.
func NumTxs(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldNumTxs, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldCreatedAt, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldHash, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldTime, v))
}

// TotalTxsEQ applies the EQ predicate on the "total_txs" field.
func TotalTxsEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTotalTxs, v))
}

// TotalTxsNEQ applies the NEQ predicate on the "total_txs" field.
func TotalTxsNEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldTotalTxs, v))
}

// TotalTxsIn applies the In predicate on the "total_txs" field.
func TotalTxsIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldTotalTxs, vs...))
}

// TotalTxsNotIn applies the NotIn predicate on the "total_txs" field.
func TotalTxsNotIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldTotalTxs, vs...))
}

// TotalTxsGT applies the GT predicate on the "total_txs" field.
func TotalTxsGT(v int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldTotalTxs, v))
}

// TotalTxsGTE applies the GTE predicate on the "total_txs" field.
func TotalTxsGTE(v int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldTotalTxs, v))
}

// TotalTxsLT applies the LT predicate on the "total_txs" field.
func TotalTxsLT(v int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldTotalTxs, v))
}

// TotalTxsLTE applies the LTE predicate on the "total_txs" field.
func TotalTxsLTE(v int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldTotalTxs, v))
}

// NumTxsEQ applies the EQ predicate on the "num_txs" field.
func NumTxsEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldNumTxs, v))
}

// NumTxsNEQ applies the NEQ predicate on the "num_txs" field.
func NumTxsNEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldNumTxs, v))
}

// NumTxsIn applies the In predicate on the "num_txs" field.
func NumTxsIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldNumTxs, vs...))
}

// NumTxsNotIn applies the NotIn predicate on the "num_txs" field.
func NumTxsNotIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldNumTxs, vs...))
}

// NumTxsGT applies the GT predicate on the "num_txs" field.
func NumTxsGT(v int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldNumTxs, v))
}

// NumTxsGTE applies the GTE predicate on the "num_txs" field.
func NumTxsGTE(v int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldNumTxs, v))
}

// NumTxsLT applies the LT predicate on the "num_txs" field.
func NumTxsLT(v int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldNumTxs, v))
}

// NumTxsLTE applies the LTE predicate on the "num_txs" field.
func NumTxsLTE(v int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldNumTxs, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTransactions applies the HasEdge predicate on the "transactions" edge.
func HasTransactions() predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionsWith applies the HasEdge predicate on the "transactions" edge with a given conditions (other predicates).
func HasTransactionsWith(preds ...predicate.Transaction) predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := newTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Block) predicate.Block {
	return predicate.Block(sql.NotPredicates(p))
}
