// Code generated by ent, DO NOT EDIT.

package account

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the account type in the database.
	Label = "account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "address"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// EdgeTransfers holds the string denoting the transfers edge name in mutations.
	EdgeTransfers = "transfers"
	// TransferFieldID holds the string denoting the ID field of the Transfer.
	TransferFieldID = "id"
	// Table holds the table name of the account in the database.
	Table = "accounts"
	// TransfersTable is the table that holds the transfers relation/edge.
	TransfersTable = "transfers"
	// TransfersInverseTable is the table name for the Transfer entity.
	// It exists in this package in order to avoid circular dependency with the "transfer" package.
	TransfersInverseTable = "transfers"
	// TransfersColumn is the table column denoting the transfers relation/edge.
	TransfersColumn = "account_transfers"
)

// Columns holds all SQL columns for account fields.
var Columns = []string{
	FieldID,
	FieldToken,
	FieldAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Account queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByTransfersCount orders the results by transfers count.
func ByTransfersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransfersStep(), opts...)
	}
}

// ByTransfers orders the results by transfers terms.
func ByTransfers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransfersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTransfersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransfersInverseTable, TransferFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransfersTable, TransfersColumn),
	)
}
