// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gno.land-block-indexer/ent/restorehistory"
)

// RestoreHistoryCreate is the builder for creating a RestoreHistory entity.
type RestoreHistoryCreate struct {
	config
	mutation *RestoreHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRestoreRangeStart sets the "restore_range_start" field.
func (_c *RestoreHistoryCreate) SetRestoreRangeStart(v int) *RestoreHistoryCreate {
	_c.mutation.SetRestoreRangeStart(v)
	return _c
}

// SetRestoreRangeEnd sets the "restore_range_end" field.
func (_c *RestoreHistoryCreate) SetRestoreRangeEnd(v int) *RestoreHistoryCreate {
	_c.mutation.SetRestoreRangeEnd(v)
	return _c
}

// SetBeingBlock sets the "being_block" field.
func (_c *RestoreHistoryCreate) SetBeingBlock(v int) *RestoreHistoryCreate {
	_c.mutation.SetBeingBlock(v)
	return _c
}

// SetID sets the "id" field.
func (_c *RestoreHistoryCreate) SetID(v int) *RestoreHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the RestoreHistoryMutation object of the builder.
func (_c *RestoreHistoryCreate) Mutation() *RestoreHistoryMutation {
	return _c.mutation
}

// Save creates the RestoreHistory in the database.
func (_c *RestoreHistoryCreate) Save(ctx context.Context) (*RestoreHistory, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *RestoreHistoryCreate) SaveX(ctx context.Context) *RestoreHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RestoreHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RestoreHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *RestoreHistoryCreate) check() error {
	if _, ok := _c.mutation.RestoreRangeStart(); !ok {
		return &ValidationError{Name: "restore_range_start", err: errors.New(`ent: missing required field "RestoreHistory.restore_range_start"`)}
	}
	if _, ok := _c.mutation.RestoreRangeEnd(); !ok {
		return &ValidationError{Name: "restore_range_end", err: errors.New(`ent: missing required field "RestoreHistory.restore_range_end"`)}
	}
	if _, ok := _c.mutation.BeingBlock(); !ok {
		return &ValidationError{Name: "being_block", err: errors.New(`ent: missing required field "RestoreHistory.being_block"`)}
	}
	return nil
}

func (_c *RestoreHistoryCreate) sqlSave(ctx context.Context) (*RestoreHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *RestoreHistoryCreate) createSpec() (*RestoreHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &RestoreHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(restorehistory.Table, sqlgraph.NewFieldSpec(restorehistory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.RestoreRangeStart(); ok {
		_spec.SetField(restorehistory.FieldRestoreRangeStart, field.TypeInt, value)
		_node.RestoreRangeStart = value
	}
	if value, ok := _c.mutation.RestoreRangeEnd(); ok {
		_spec.SetField(restorehistory.FieldRestoreRangeEnd, field.TypeInt, value)
		_node.RestoreRangeEnd = value
	}
	if value, ok := _c.mutation.BeingBlock(); ok {
		_spec.SetField(restorehistory.FieldBeingBlock, field.TypeInt, value)
		_node.BeingBlock = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RestoreHistory.Create().
//		SetRestoreRangeStart(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RestoreHistoryUpsert) {
//			SetRestoreRangeStart(v+v).
//		}).
//		Exec(ctx)
func (_c *RestoreHistoryCreate) OnConflict(opts ...sql.ConflictOption) *RestoreHistoryUpsertOne {
	_c.conflict = opts
	return &RestoreHistoryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RestoreHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RestoreHistoryCreate) OnConflictColumns(columns ...string) *RestoreHistoryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RestoreHistoryUpsertOne{
		create: _c,
	}
}

type (
	// RestoreHistoryUpsertOne is the builder for "upsert"-ing
	//  one RestoreHistory node.
	RestoreHistoryUpsertOne struct {
		create *RestoreHistoryCreate
	}

	// RestoreHistoryUpsert is the "OnConflict" setter.
	RestoreHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetRestoreRangeStart sets the "restore_range_start" field.
func (u *RestoreHistoryUpsert) SetRestoreRangeStart(v int) *RestoreHistoryUpsert {
	u.Set(restorehistory.FieldRestoreRangeStart, v)
	return u
}

// UpdateRestoreRangeStart sets the "restore_range_start" field to the value that was provided on create.
func (u *RestoreHistoryUpsert) UpdateRestoreRangeStart() *RestoreHistoryUpsert {
	u.SetExcluded(restorehistory.FieldRestoreRangeStart)
	return u
}

// AddRestoreRangeStart adds v to the "restore_range_start" field.
func (u *RestoreHistoryUpsert) AddRestoreRangeStart(v int) *RestoreHistoryUpsert {
	u.Add(restorehistory.FieldRestoreRangeStart, v)
	return u
}

// SetRestoreRangeEnd sets the "restore_range_end" field.
func (u *RestoreHistoryUpsert) SetRestoreRangeEnd(v int) *RestoreHistoryUpsert {
	u.Set(restorehistory.FieldRestoreRangeEnd, v)
	return u
}

// UpdateRestoreRangeEnd sets the "restore_range_end" field to the value that was provided on create.
func (u *RestoreHistoryUpsert) UpdateRestoreRangeEnd() *RestoreHistoryUpsert {
	u.SetExcluded(restorehistory.FieldRestoreRangeEnd)
	return u
}

// AddRestoreRangeEnd adds v to the "restore_range_end" field.
func (u *RestoreHistoryUpsert) AddRestoreRangeEnd(v int) *RestoreHistoryUpsert {
	u.Add(restorehistory.FieldRestoreRangeEnd, v)
	return u
}

// SetBeingBlock sets the "being_block" field.
func (u *RestoreHistoryUpsert) SetBeingBlock(v int) *RestoreHistoryUpsert {
	u.Set(restorehistory.FieldBeingBlock, v)
	return u
}

// UpdateBeingBlock sets the "being_block" field to the value that was provided on create.
func (u *RestoreHistoryUpsert) UpdateBeingBlock() *RestoreHistoryUpsert {
	u.SetExcluded(restorehistory.FieldBeingBlock)
	return u
}

// AddBeingBlock adds v to the "being_block" field.
func (u *RestoreHistoryUpsert) AddBeingBlock(v int) *RestoreHistoryUpsert {
	u.Add(restorehistory.FieldBeingBlock, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RestoreHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(restorehistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RestoreHistoryUpsertOne) UpdateNewValues() *RestoreHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(restorehistory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RestoreHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RestoreHistoryUpsertOne) Ignore() *RestoreHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RestoreHistoryUpsertOne) DoNothing() *RestoreHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RestoreHistoryCreate.OnConflict
// documentation for more info.
func (u *RestoreHistoryUpsertOne) Update(set func(*RestoreHistoryUpsert)) *RestoreHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RestoreHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetRestoreRangeStart sets the "restore_range_start" field.
func (u *RestoreHistoryUpsertOne) SetRestoreRangeStart(v int) *RestoreHistoryUpsertOne {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.SetRestoreRangeStart(v)
	})
}

// AddRestoreRangeStart adds v to the "restore_range_start" field.
func (u *RestoreHistoryUpsertOne) AddRestoreRangeStart(v int) *RestoreHistoryUpsertOne {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.AddRestoreRangeStart(v)
	})
}

// UpdateRestoreRangeStart sets the "restore_range_start" field to the value that was provided on create.
func (u *RestoreHistoryUpsertOne) UpdateRestoreRangeStart() *RestoreHistoryUpsertOne {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.UpdateRestoreRangeStart()
	})
}

// SetRestoreRangeEnd sets the "restore_range_end" field.
func (u *RestoreHistoryUpsertOne) SetRestoreRangeEnd(v int) *RestoreHistoryUpsertOne {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.SetRestoreRangeEnd(v)
	})
}

// AddRestoreRangeEnd adds v to the "restore_range_end" field.
func (u *RestoreHistoryUpsertOne) AddRestoreRangeEnd(v int) *RestoreHistoryUpsertOne {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.AddRestoreRangeEnd(v)
	})
}

// UpdateRestoreRangeEnd sets the "restore_range_end" field to the value that was provided on create.
func (u *RestoreHistoryUpsertOne) UpdateRestoreRangeEnd() *RestoreHistoryUpsertOne {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.UpdateRestoreRangeEnd()
	})
}

// SetBeingBlock sets the "being_block" field.
func (u *RestoreHistoryUpsertOne) SetBeingBlock(v int) *RestoreHistoryUpsertOne {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.SetBeingBlock(v)
	})
}

// AddBeingBlock adds v to the "being_block" field.
func (u *RestoreHistoryUpsertOne) AddBeingBlock(v int) *RestoreHistoryUpsertOne {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.AddBeingBlock(v)
	})
}

// UpdateBeingBlock sets the "being_block" field to the value that was provided on create.
func (u *RestoreHistoryUpsertOne) UpdateBeingBlock() *RestoreHistoryUpsertOne {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.UpdateBeingBlock()
	})
}

// Exec executes the query.
func (u *RestoreHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RestoreHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RestoreHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RestoreHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RestoreHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RestoreHistoryCreateBulk is the builder for creating many RestoreHistory entities in bulk.
type RestoreHistoryCreateBulk struct {
	config
	err      error
	builders []*RestoreHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the RestoreHistory entities in the database.
func (_c *RestoreHistoryCreateBulk) Save(ctx context.Context) ([]*RestoreHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*RestoreHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RestoreHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *RestoreHistoryCreateBulk) SaveX(ctx context.Context) []*RestoreHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RestoreHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RestoreHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RestoreHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RestoreHistoryUpsert) {
//			SetRestoreRangeStart(v+v).
//		}).
//		Exec(ctx)
func (_c *RestoreHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *RestoreHistoryUpsertBulk {
	_c.conflict = opts
	return &RestoreHistoryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RestoreHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RestoreHistoryCreateBulk) OnConflictColumns(columns ...string) *RestoreHistoryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RestoreHistoryUpsertBulk{
		create: _c,
	}
}

// RestoreHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of RestoreHistory nodes.
type RestoreHistoryUpsertBulk struct {
	create *RestoreHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RestoreHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(restorehistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RestoreHistoryUpsertBulk) UpdateNewValues() *RestoreHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(restorehistory.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RestoreHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RestoreHistoryUpsertBulk) Ignore() *RestoreHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RestoreHistoryUpsertBulk) DoNothing() *RestoreHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RestoreHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *RestoreHistoryUpsertBulk) Update(set func(*RestoreHistoryUpsert)) *RestoreHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RestoreHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetRestoreRangeStart sets the "restore_range_start" field.
func (u *RestoreHistoryUpsertBulk) SetRestoreRangeStart(v int) *RestoreHistoryUpsertBulk {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.SetRestoreRangeStart(v)
	})
}

// AddRestoreRangeStart adds v to the "restore_range_start" field.
func (u *RestoreHistoryUpsertBulk) AddRestoreRangeStart(v int) *RestoreHistoryUpsertBulk {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.AddRestoreRangeStart(v)
	})
}

// UpdateRestoreRangeStart sets the "restore_range_start" field to the value that was provided on create.
func (u *RestoreHistoryUpsertBulk) UpdateRestoreRangeStart() *RestoreHistoryUpsertBulk {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.UpdateRestoreRangeStart()
	})
}

// SetRestoreRangeEnd sets the "restore_range_end" field.
func (u *RestoreHistoryUpsertBulk) SetRestoreRangeEnd(v int) *RestoreHistoryUpsertBulk {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.SetRestoreRangeEnd(v)
	})
}

// AddRestoreRangeEnd adds v to the "restore_range_end" field.
func (u *RestoreHistoryUpsertBulk) AddRestoreRangeEnd(v int) *RestoreHistoryUpsertBulk {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.AddRestoreRangeEnd(v)
	})
}

// UpdateRestoreRangeEnd sets the "restore_range_end" field to the value that was provided on create.
func (u *RestoreHistoryUpsertBulk) UpdateRestoreRangeEnd() *RestoreHistoryUpsertBulk {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.UpdateRestoreRangeEnd()
	})
}

// SetBeingBlock sets the "being_block" field.
func (u *RestoreHistoryUpsertBulk) SetBeingBlock(v int) *RestoreHistoryUpsertBulk {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.SetBeingBlock(v)
	})
}

// AddBeingBlock adds v to the "being_block" field.
func (u *RestoreHistoryUpsertBulk) AddBeingBlock(v int) *RestoreHistoryUpsertBulk {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.AddBeingBlock(v)
	})
}

// UpdateBeingBlock sets the "being_block" field to the value that was provided on create.
func (u *RestoreHistoryUpsertBulk) UpdateBeingBlock() *RestoreHistoryUpsertBulk {
	return u.Update(func(s *RestoreHistoryUpsert) {
		s.UpdateBeingBlock()
	})
}

// Exec executes the query.
func (u *RestoreHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RestoreHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RestoreHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RestoreHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
