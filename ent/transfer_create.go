// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gno.land-block-indexer/ent/account"
	"gno.land-block-indexer/ent/transfer"
)

// TransferCreate is the builder for creating a Transfer entity.
type TransferCreate struct {
	config
	mutation *TransferMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFromAddress sets the "from_address" field.
func (_c *TransferCreate) SetFromAddress(v string) *TransferCreate {
	_c.mutation.SetFromAddress(v)
	return _c
}

// SetToAddress sets the "to_address" field.
func (_c *TransferCreate) SetToAddress(v string) *TransferCreate {
	_c.mutation.SetToAddress(v)
	return _c
}

// SetToken sets the "token" field.
func (_c *TransferCreate) SetToken(v string) *TransferCreate {
	_c.mutation.SetToken(v)
	return _c
}

// SetAmount sets the "amount" field.
func (_c *TransferCreate) SetAmount(v float64) *TransferCreate {
	_c.mutation.SetAmount(v)
	return _c
}

// SetDenom sets the "denom" field.
func (_c *TransferCreate) SetDenom(v string) *TransferCreate {
	_c.mutation.SetDenom(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *TransferCreate) SetCreatedAt(v time.Time) *TransferCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TransferCreate) SetNillableCreatedAt(v *time.Time) *TransferCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *TransferCreate) SetID(v int) *TransferCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (_c *TransferCreate) SetAccountID(id string) *TransferCreate {
	_c.mutation.SetAccountID(id)
	return _c
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (_c *TransferCreate) SetNillableAccountID(id *string) *TransferCreate {
	if id != nil {
		_c = _c.SetAccountID(*id)
	}
	return _c
}

// SetAccount sets the "account" edge to the Account entity.
func (_c *TransferCreate) SetAccount(v *Account) *TransferCreate {
	return _c.SetAccountID(v.ID)
}

// Mutation returns the TransferMutation object of the builder.
func (_c *TransferCreate) Mutation() *TransferMutation {
	return _c.mutation
}

// Save creates the Transfer in the database.
func (_c *TransferCreate) Save(ctx context.Context) (*Transfer, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TransferCreate) SaveX(ctx context.Context) *Transfer {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TransferCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TransferCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TransferCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := transfer.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TransferCreate) check() error {
	if _, ok := _c.mutation.FromAddress(); !ok {
		return &ValidationError{Name: "from_address", err: errors.New(`ent: missing required field "Transfer.from_address"`)}
	}
	if v, ok := _c.mutation.FromAddress(); ok {
		if err := transfer.FromAddressValidator(v); err != nil {
			return &ValidationError{Name: "from_address", err: fmt.Errorf(`ent: validator failed for field "Transfer.from_address": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ToAddress(); !ok {
		return &ValidationError{Name: "to_address", err: errors.New(`ent: missing required field "Transfer.to_address"`)}
	}
	if v, ok := _c.mutation.ToAddress(); ok {
		if err := transfer.ToAddressValidator(v); err != nil {
			return &ValidationError{Name: "to_address", err: fmt.Errorf(`ent: validator failed for field "Transfer.to_address": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Transfer.token"`)}
	}
	if v, ok := _c.mutation.Token(); ok {
		if err := transfer.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Transfer.token": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Transfer.amount"`)}
	}
	if v, ok := _c.mutation.Amount(); ok {
		if err := transfer.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Transfer.amount": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Denom(); !ok {
		return &ValidationError{Name: "denom", err: errors.New(`ent: missing required field "Transfer.denom"`)}
	}
	if v, ok := _c.mutation.Denom(); ok {
		if err := transfer.DenomValidator(v); err != nil {
			return &ValidationError{Name: "denom", err: fmt.Errorf(`ent: validator failed for field "Transfer.denom": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Transfer.created_at"`)}
	}
	return nil
}

func (_c *TransferCreate) sqlSave(ctx context.Context) (*Transfer, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TransferCreate) createSpec() (*Transfer, *sqlgraph.CreateSpec) {
	var (
		_node = &Transfer{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(transfer.Table, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.FromAddress(); ok {
		_spec.SetField(transfer.FieldFromAddress, field.TypeString, value)
		_node.FromAddress = value
	}
	if value, ok := _c.mutation.ToAddress(); ok {
		_spec.SetField(transfer.FieldToAddress, field.TypeString, value)
		_node.ToAddress = value
	}
	if value, ok := _c.mutation.Token(); ok {
		_spec.SetField(transfer.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := _c.mutation.Amount(); ok {
		_spec.SetField(transfer.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := _c.mutation.Denom(); ok {
		_spec.SetField(transfer.FieldDenom, field.TypeString, value)
		_node.Denom = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(transfer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.AccountTable,
			Columns: []string{transfer.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_transfers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transfer.Create().
//		SetFromAddress(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransferUpsert) {
//			SetFromAddress(v+v).
//		}).
//		Exec(ctx)
func (_c *TransferCreate) OnConflict(opts ...sql.ConflictOption) *TransferUpsertOne {
	_c.conflict = opts
	return &TransferUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TransferCreate) OnConflictColumns(columns ...string) *TransferUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TransferUpsertOne{
		create: _c,
	}
}

type (
	// TransferUpsertOne is the builder for "upsert"-ing
	//  one Transfer node.
	TransferUpsertOne struct {
		create *TransferCreate
	}

	// TransferUpsert is the "OnConflict" setter.
	TransferUpsert struct {
		*sql.UpdateSet
	}
)

// SetFromAddress sets the "from_address" field.
func (u *TransferUpsert) SetFromAddress(v string) *TransferUpsert {
	u.Set(transfer.FieldFromAddress, v)
	return u
}

// UpdateFromAddress sets the "from_address" field to the value that was provided on create.
func (u *TransferUpsert) UpdateFromAddress() *TransferUpsert {
	u.SetExcluded(transfer.FieldFromAddress)
	return u
}

// SetToAddress sets the "to_address" field.
func (u *TransferUpsert) SetToAddress(v string) *TransferUpsert {
	u.Set(transfer.FieldToAddress, v)
	return u
}

// UpdateToAddress sets the "to_address" field to the value that was provided on create.
func (u *TransferUpsert) UpdateToAddress() *TransferUpsert {
	u.SetExcluded(transfer.FieldToAddress)
	return u
}

// SetToken sets the "token" field.
func (u *TransferUpsert) SetToken(v string) *TransferUpsert {
	u.Set(transfer.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *TransferUpsert) UpdateToken() *TransferUpsert {
	u.SetExcluded(transfer.FieldToken)
	return u
}

// SetAmount sets the "amount" field.
func (u *TransferUpsert) SetAmount(v float64) *TransferUpsert {
	u.Set(transfer.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransferUpsert) UpdateAmount() *TransferUpsert {
	u.SetExcluded(transfer.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *TransferUpsert) AddAmount(v float64) *TransferUpsert {
	u.Add(transfer.FieldAmount, v)
	return u
}

// SetDenom sets the "denom" field.
func (u *TransferUpsert) SetDenom(v string) *TransferUpsert {
	u.Set(transfer.FieldDenom, v)
	return u
}

// UpdateDenom sets the "denom" field to the value that was provided on create.
func (u *TransferUpsert) UpdateDenom() *TransferUpsert {
	u.SetExcluded(transfer.FieldDenom)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transfer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransferUpsertOne) UpdateNewValues() *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(transfer.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(transfer.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transfer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransferUpsertOne) Ignore() *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransferUpsertOne) DoNothing() *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransferCreate.OnConflict
// documentation for more info.
func (u *TransferUpsertOne) Update(set func(*TransferUpsert)) *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetFromAddress sets the "from_address" field.
func (u *TransferUpsertOne) SetFromAddress(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetFromAddress(v)
	})
}

// UpdateFromAddress sets the "from_address" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateFromAddress() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateFromAddress()
	})
}

// SetToAddress sets the "to_address" field.
func (u *TransferUpsertOne) SetToAddress(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetToAddress(v)
	})
}

// UpdateToAddress sets the "to_address" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateToAddress() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateToAddress()
	})
}

// SetToken sets the "token" field.
func (u *TransferUpsertOne) SetToken(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateToken() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateToken()
	})
}

// SetAmount sets the "amount" field.
func (u *TransferUpsertOne) SetAmount(v float64) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TransferUpsertOne) AddAmount(v float64) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateAmount() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateAmount()
	})
}

// SetDenom sets the "denom" field.
func (u *TransferUpsertOne) SetDenom(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetDenom(v)
	})
}

// UpdateDenom sets the "denom" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateDenom() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateDenom()
	})
}

// Exec executes the query.
func (u *TransferUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransferCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransferUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransferUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransferUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransferCreateBulk is the builder for creating many Transfer entities in bulk.
type TransferCreateBulk struct {
	config
	err      error
	builders []*TransferCreate
	conflict []sql.ConflictOption
}

// Save creates the Transfer entities in the database.
func (_c *TransferCreateBulk) Save(ctx context.Context) ([]*Transfer, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Transfer, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TransferCreateBulk) SaveX(ctx context.Context) []*Transfer {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TransferCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TransferCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transfer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransferUpsert) {
//			SetFromAddress(v+v).
//		}).
//		Exec(ctx)
func (_c *TransferCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransferUpsertBulk {
	_c.conflict = opts
	return &TransferUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TransferCreateBulk) OnConflictColumns(columns ...string) *TransferUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TransferUpsertBulk{
		create: _c,
	}
}

// TransferUpsertBulk is the builder for "upsert"-ing
// a bulk of Transfer nodes.
type TransferUpsertBulk struct {
	create *TransferCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transfer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransferUpsertBulk) UpdateNewValues() *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(transfer.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(transfer.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransferUpsertBulk) Ignore() *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransferUpsertBulk) DoNothing() *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransferCreateBulk.OnConflict
// documentation for more info.
func (u *TransferUpsertBulk) Update(set func(*TransferUpsert)) *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetFromAddress sets the "from_address" field.
func (u *TransferUpsertBulk) SetFromAddress(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetFromAddress(v)
	})
}

// UpdateFromAddress sets the "from_address" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateFromAddress() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateFromAddress()
	})
}

// SetToAddress sets the "to_address" field.
func (u *TransferUpsertBulk) SetToAddress(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetToAddress(v)
	})
}

// UpdateToAddress sets the "to_address" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateToAddress() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateToAddress()
	})
}

// SetToken sets the "token" field.
func (u *TransferUpsertBulk) SetToken(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateToken() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateToken()
	})
}

// SetAmount sets the "amount" field.
func (u *TransferUpsertBulk) SetAmount(v float64) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TransferUpsertBulk) AddAmount(v float64) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateAmount() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateAmount()
	})
}

// SetDenom sets the "denom" field.
func (u *TransferUpsertBulk) SetDenom(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetDenom(v)
	})
}

// UpdateDenom sets the "denom" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateDenom() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateDenom()
	})
}

// Exec executes the query.
func (u *TransferUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TransferCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransferCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransferUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
