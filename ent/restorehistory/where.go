// Code generated by ent, DO NOT EDIT.

package restorehistory

import (
	"entgo.io/ent/dialect/sql"
	"gno.land-block-indexer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldLTE(FieldID, id))
}

// RestoreRangeStart applies equality check predicate on the "restore_range_start" field. It's identical to RestoreRangeStartEQ.
func RestoreRangeStart(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldEQ(FieldRestoreRangeStart, v))
}

// RestoreRangeEnd applies equality check predicate on the "restore_range_end" field. It's identical to RestoreRangeEndEQ.
func RestoreRangeEnd(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldEQ(FieldRestoreRangeEnd, v))
}

// BeingBlock applies equality check predicate on the "being_block" field. It's identical to BeingBlockEQ.
func BeingBlock(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldEQ(FieldBeingBlock, v))
}

// RestoreRangeStartEQ applies the EQ predicate on the "restore_range_start" field.
func RestoreRangeStartEQ(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldEQ(FieldRestoreRangeStart, v))
}

// RestoreRangeStartNEQ applies the NEQ predicate on the "restore_range_start" field.
func RestoreRangeStartNEQ(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldNEQ(FieldRestoreRangeStart, v))
}

// RestoreRangeStartIn applies the In predicate on the "restore_range_start" field.
func RestoreRangeStartIn(vs ...int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldIn(FieldRestoreRangeStart, vs...))
}

// RestoreRangeStartNotIn applies the NotIn predicate on the "restore_range_start" field.
func RestoreRangeStartNotIn(vs ...int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldNotIn(FieldRestoreRangeStart, vs...))
}

// RestoreRangeStartGT applies the GT predicate on the "restore_range_start" field.
func RestoreRangeStartGT(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldGT(FieldRestoreRangeStart, v))
}

// RestoreRangeStartGTE applies the GTE predicate on the "restore_range_start" field.
func RestoreRangeStartGTE(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldGTE(FieldRestoreRangeStart, v))
}

// RestoreRangeStartLT applies the LT predicate on the "restore_range_start" field.
func RestoreRangeStartLT(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldLT(FieldRestoreRangeStart, v))
}

// RestoreRangeStartLTE applies the LTE predicate on the "restore_range_start" field.
func RestoreRangeStartLTE(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldLTE(FieldRestoreRangeStart, v))
}

// RestoreRangeEndEQ applies the EQ predicate on the "restore_range_end" field.
func RestoreRangeEndEQ(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldEQ(FieldRestoreRangeEnd, v))
}

// RestoreRangeEndNEQ applies the NEQ predicate on the "restore_range_end" field.
func RestoreRangeEndNEQ(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldNEQ(FieldRestoreRangeEnd, v))
}

// RestoreRangeEndIn applies the In predicate on the "restore_range_end" field.
func RestoreRangeEndIn(vs ...int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldIn(FieldRestoreRangeEnd, vs...))
}

// RestoreRangeEndNotIn applies the NotIn predicate on the "restore_range_end" field.
func RestoreRangeEndNotIn(vs ...int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldNotIn(FieldRestoreRangeEnd, vs...))
}

// RestoreRangeEndGT applies the GT predicate on the "restore_range_end" field.
func RestoreRangeEndGT(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldGT(FieldRestoreRangeEnd, v))
}

// RestoreRangeEndGTE applies the GTE predicate on the "restore_range_end" field.
func RestoreRangeEndGTE(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldGTE(FieldRestoreRangeEnd, v))
}

// RestoreRangeEndLT applies the LT predicate on the "restore_range_end" field.
func RestoreRangeEndLT(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldLT(FieldRestoreRangeEnd, v))
}

// RestoreRangeEndLTE applies the LTE predicate on the "restore_range_end" field.
func RestoreRangeEndLTE(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldLTE(FieldRestoreRangeEnd, v))
}

// BeingBlockEQ applies the EQ predicate on the "being_block" field.
func BeingBlockEQ(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldEQ(FieldBeingBlock, v))
}

// BeingBlockNEQ applies the NEQ predicate on the "being_block" field.
func BeingBlockNEQ(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldNEQ(FieldBeingBlock, v))
}

// BeingBlockIn applies the In predicate on the "being_block" field.
func BeingBlockIn(vs ...int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldIn(FieldBeingBlock, vs...))
}

// BeingBlockNotIn applies the NotIn predicate on the "being_block" field.
func BeingBlockNotIn(vs ...int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldNotIn(FieldBeingBlock, vs...))
}

// BeingBlockGT applies the GT predicate on the "being_block" field.
func BeingBlockGT(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldGT(FieldBeingBlock, v))
}

// BeingBlockGTE applies the GTE predicate on the "being_block" field.
func BeingBlockGTE(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldGTE(FieldBeingBlock, v))
}

// BeingBlockLT applies the LT predicate on the "being_block" field.
func BeingBlockLT(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldLT(FieldBeingBlock, v))
}

// BeingBlockLTE applies the LTE predicate on the "being_block" field.
func BeingBlockLTE(v int) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.FieldLTE(FieldBeingBlock, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RestoreHistory) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RestoreHistory) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RestoreHistory) predicate.RestoreHistory {
	return predicate.RestoreHistory(sql.NotPredicates(p))
}
