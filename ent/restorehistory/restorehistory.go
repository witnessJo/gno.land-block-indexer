// Code generated by ent, DO NOT EDIT.

package restorehistory

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the restorehistory type in the database.
	Label = "restore_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRestoreRangeStart holds the string denoting the restore_range_start field in the database.
	FieldRestoreRangeStart = "restore_range_start"
	// FieldRestoreRangeEnd holds the string denoting the restore_range_end field in the database.
	FieldRestoreRangeEnd = "restore_range_end"
	// FieldBeingBlock holds the string denoting the being_block field in the database.
	FieldBeingBlock = "being_block"
	// Table holds the table name of the restorehistory in the database.
	Table = "restore_histories"
)

// Columns holds all SQL columns for restorehistory fields.
var Columns = []string{
	FieldID,
	FieldRestoreRangeStart,
	FieldRestoreRangeEnd,
	FieldBeingBlock,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the RestoreHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRestoreRangeStart orders the results by the restore_range_start field.
func ByRestoreRangeStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRestoreRangeStart, opts...).ToFunc()
}

// ByRestoreRangeEnd orders the results by the restore_range_end field.
func ByRestoreRangeEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRestoreRangeEnd, opts...).ToFunc()
}

// ByBeingBlock orders the results by the being_block field.
func ByBeingBlock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeingBlock, opts...).ToFunc()
}
