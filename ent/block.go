// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gno.land-block-indexer/ent/block"
)

// Block is the model entity for the Block schema.
type Block struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hash of the block
	Hash string `json:"hash,omitempty"`
	// Height of the block
	Height int `json:"height,omitempty"`
	// Timestamp of the block
	Time time.Time `json:"time,omitempty"`
	// Total number of transactions in the block
	TotalTxs int `json:"total_txs,omitempty"`
	// Number of transactions in the block
	NumTxs int `json:"num_txs,omitempty"`
	// Creation time of the block
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Block) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case block.FieldID, block.FieldHeight, block.FieldTotalTxs, block.FieldNumTxs:
			values[i] = new(sql.NullInt64)
		case block.FieldHash:
			values[i] = new(sql.NullString)
		case block.FieldTime, block.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Block fields.
func (_m *Block) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case block.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case block.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				_m.Hash = value.String
			}
		case block.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				_m.Height = int(value.Int64)
			}
		case block.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				_m.Time = value.Time
			}
		case block.FieldTotalTxs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_txs", values[i])
			} else if value.Valid {
				_m.TotalTxs = int(value.Int64)
			}
		case block.FieldNumTxs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_txs", values[i])
			} else if value.Valid {
				_m.NumTxs = int(value.Int64)
			}
		case block.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Block.
// This includes values selected through modifiers, order, etc.
func (_m *Block) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Block.
// Note that you need to call Block.Unwrap() before calling this method if this Block
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Block) Update() *BlockUpdateOne {
	return NewBlockClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Block entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Block) Unwrap() *Block {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Block is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Block) String() string {
	var builder strings.Builder
	builder.WriteString("Block(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("hash=")
	builder.WriteString(_m.Hash)
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", _m.Height))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(_m.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("total_txs=")
	builder.WriteString(fmt.Sprintf("%v", _m.TotalTxs))
	builder.WriteString(", ")
	builder.WriteString("num_txs=")
	builder.WriteString(fmt.Sprintf("%v", _m.NumTxs))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Blocks is a parsable slice of Block.
type Blocks []*Block
