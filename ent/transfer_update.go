// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gno.land-block-indexer/ent/account"
	"gno.land-block-indexer/ent/predicate"
	"gno.land-block-indexer/ent/transfer"
)

// TransferUpdate is the builder for updating Transfer entities.
type TransferUpdate struct {
	config
	hooks    []Hook
	mutation *TransferMutation
}

// Where appends a list predicates to the TransferUpdate builder.
func (_u *TransferUpdate) Where(ps ...predicate.Transfer) *TransferUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFromAddress sets the "from_address" field.
func (_u *TransferUpdate) SetFromAddress(v string) *TransferUpdate {
	_u.mutation.SetFromAddress(v)
	return _u
}

// SetNillableFromAddress sets the "from_address" field if the given value is not nil.
func (_u *TransferUpdate) SetNillableFromAddress(v *string) *TransferUpdate {
	if v != nil {
		_u.SetFromAddress(*v)
	}
	return _u
}

// SetToAddress sets the "to_address" field.
func (_u *TransferUpdate) SetToAddress(v string) *TransferUpdate {
	_u.mutation.SetToAddress(v)
	return _u
}

// SetNillableToAddress sets the "to_address" field if the given value is not nil.
func (_u *TransferUpdate) SetNillableToAddress(v *string) *TransferUpdate {
	if v != nil {
		_u.SetToAddress(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *TransferUpdate) SetToken(v string) *TransferUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *TransferUpdate) SetNillableToken(v *string) *TransferUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *TransferUpdate) SetAmount(v float64) *TransferUpdate {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *TransferUpdate) SetNillableAmount(v *float64) *TransferUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *TransferUpdate) AddAmount(v float64) *TransferUpdate {
	_u.mutation.AddAmount(v)
	return _u
}

// SetDenom sets the "denom" field.
func (_u *TransferUpdate) SetDenom(v string) *TransferUpdate {
	_u.mutation.SetDenom(v)
	return _u
}

// SetNillableDenom sets the "denom" field if the given value is not nil.
func (_u *TransferUpdate) SetNillableDenom(v *string) *TransferUpdate {
	if v != nil {
		_u.SetDenom(*v)
	}
	return _u
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (_u *TransferUpdate) SetAccountID(id string) *TransferUpdate {
	_u.mutation.SetAccountID(id)
	return _u
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (_u *TransferUpdate) SetNillableAccountID(id *string) *TransferUpdate {
	if id != nil {
		_u = _u.SetAccountID(*id)
	}
	return _u
}

// SetAccount sets the "account" edge to the Account entity.
func (_u *TransferUpdate) SetAccount(v *Account) *TransferUpdate {
	return _u.SetAccountID(v.ID)
}

// Mutation returns the TransferMutation object of the builder.
func (_u *TransferUpdate) Mutation() *TransferMutation {
	return _u.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (_u *TransferUpdate) ClearAccount() *TransferUpdate {
	_u.mutation.ClearAccount()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TransferUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TransferUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TransferUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TransferUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TransferUpdate) check() error {
	if v, ok := _u.mutation.FromAddress(); ok {
		if err := transfer.FromAddressValidator(v); err != nil {
			return &ValidationError{Name: "from_address", err: fmt.Errorf(`ent: validator failed for field "Transfer.from_address": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ToAddress(); ok {
		if err := transfer.ToAddressValidator(v); err != nil {
			return &ValidationError{Name: "to_address", err: fmt.Errorf(`ent: validator failed for field "Transfer.to_address": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := transfer.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Transfer.token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Amount(); ok {
		if err := transfer.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Transfer.amount": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Denom(); ok {
		if err := transfer.DenomValidator(v); err != nil {
			return &ValidationError{Name: "denom", err: fmt.Errorf(`ent: validator failed for field "Transfer.denom": %w`, err)}
		}
	}
	return nil
}

func (_u *TransferUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transfer.Table, transfer.Columns, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FromAddress(); ok {
		_spec.SetField(transfer.FieldFromAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.ToAddress(); ok {
		_spec.SetField(transfer.FieldToAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(transfer.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(transfer.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(transfer.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Denom(); ok {
		_spec.SetField(transfer.FieldDenom, field.TypeString, value)
	}
	if _u.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.AccountTable,
			Columns: []string{transfer.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.AccountTable,
			Columns: []string{transfer.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TransferUpdateOne is the builder for updating a single Transfer entity.
type TransferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransferMutation
}

// SetFromAddress sets the "from_address" field.
func (_u *TransferUpdateOne) SetFromAddress(v string) *TransferUpdateOne {
	_u.mutation.SetFromAddress(v)
	return _u
}

// SetNillableFromAddress sets the "from_address" field if the given value is not nil.
func (_u *TransferUpdateOne) SetNillableFromAddress(v *string) *TransferUpdateOne {
	if v != nil {
		_u.SetFromAddress(*v)
	}
	return _u
}

// SetToAddress sets the "to_address" field.
func (_u *TransferUpdateOne) SetToAddress(v string) *TransferUpdateOne {
	_u.mutation.SetToAddress(v)
	return _u
}

// SetNillableToAddress sets the "to_address" field if the given value is not nil.
func (_u *TransferUpdateOne) SetNillableToAddress(v *string) *TransferUpdateOne {
	if v != nil {
		_u.SetToAddress(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *TransferUpdateOne) SetToken(v string) *TransferUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *TransferUpdateOne) SetNillableToken(v *string) *TransferUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *TransferUpdateOne) SetAmount(v float64) *TransferUpdateOne {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *TransferUpdateOne) SetNillableAmount(v *float64) *TransferUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *TransferUpdateOne) AddAmount(v float64) *TransferUpdateOne {
	_u.mutation.AddAmount(v)
	return _u
}

// SetDenom sets the "denom" field.
func (_u *TransferUpdateOne) SetDenom(v string) *TransferUpdateOne {
	_u.mutation.SetDenom(v)
	return _u
}

// SetNillableDenom sets the "denom" field if the given value is not nil.
func (_u *TransferUpdateOne) SetNillableDenom(v *string) *TransferUpdateOne {
	if v != nil {
		_u.SetDenom(*v)
	}
	return _u
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (_u *TransferUpdateOne) SetAccountID(id string) *TransferUpdateOne {
	_u.mutation.SetAccountID(id)
	return _u
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (_u *TransferUpdateOne) SetNillableAccountID(id *string) *TransferUpdateOne {
	if id != nil {
		_u = _u.SetAccountID(*id)
	}
	return _u
}

// SetAccount sets the "account" edge to the Account entity.
func (_u *TransferUpdateOne) SetAccount(v *Account) *TransferUpdateOne {
	return _u.SetAccountID(v.ID)
}

// Mutation returns the TransferMutation object of the builder.
func (_u *TransferUpdateOne) Mutation() *TransferMutation {
	return _u.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (_u *TransferUpdateOne) ClearAccount() *TransferUpdateOne {
	_u.mutation.ClearAccount()
	return _u
}

// Where appends a list predicates to the TransferUpdate builder.
func (_u *TransferUpdateOne) Where(ps ...predicate.Transfer) *TransferUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TransferUpdateOne) Select(field string, fields ...string) *TransferUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Transfer entity.
func (_u *TransferUpdateOne) Save(ctx context.Context) (*Transfer, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TransferUpdateOne) SaveX(ctx context.Context) *Transfer {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TransferUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TransferUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TransferUpdateOne) check() error {
	if v, ok := _u.mutation.FromAddress(); ok {
		if err := transfer.FromAddressValidator(v); err != nil {
			return &ValidationError{Name: "from_address", err: fmt.Errorf(`ent: validator failed for field "Transfer.from_address": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ToAddress(); ok {
		if err := transfer.ToAddressValidator(v); err != nil {
			return &ValidationError{Name: "to_address", err: fmt.Errorf(`ent: validator failed for field "Transfer.to_address": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := transfer.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Transfer.token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Amount(); ok {
		if err := transfer.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Transfer.amount": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Denom(); ok {
		if err := transfer.DenomValidator(v); err != nil {
			return &ValidationError{Name: "denom", err: fmt.Errorf(`ent: validator failed for field "Transfer.denom": %w`, err)}
		}
	}
	return nil
}

func (_u *TransferUpdateOne) sqlSave(ctx context.Context) (_node *Transfer, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transfer.Table, transfer.Columns, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transfer.FieldID)
		for _, f := range fields {
			if !transfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FromAddress(); ok {
		_spec.SetField(transfer.FieldFromAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.ToAddress(); ok {
		_spec.SetField(transfer.FieldToAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(transfer.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(transfer.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(transfer.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Denom(); ok {
		_spec.SetField(transfer.FieldDenom, field.TypeString, value)
	}
	if _u.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.AccountTable,
			Columns: []string{transfer.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.AccountTable,
			Columns: []string{transfer.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transfer{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
