// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gno.land-block-indexer/ent/account"
	"gno.land-block-indexer/ent/block"
	"gno.land-block-indexer/ent/predicate"
	"gno.land-block-indexer/ent/restorehistory"
	"gno.land-block-indexer/ent/schema"
	"gno.land-block-indexer/ent/transaction"
	"gno.land-block-indexer/ent/transfer"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount        = "Account"
	TypeBlock          = "Block"
	TypeRestoreHistory = "RestoreHistory"
	TypeTransaction    = "Transaction"
	TypeTransfer       = "Transfer"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	token               *string
	amount              *float64
	addamount           *float64
	clearedFields       map[string]struct{}
	transactions        map[int]struct{}
	removedtransactions map[int]struct{}
	clearedtransactions bool
	transfers           map[int]struct{}
	removedtransfers    map[int]struct{}
	clearedtransfers    bool
	done                bool
	oldValue            func(context.Context) (*Account, error)
	predicates          []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id string) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Account entities.
func (m *AccountMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetToken sets the "token" field.
func (m *AccountMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *AccountMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *AccountMutation) ResetToken() {
	m.token = nil
}

// SetAmount sets the "amount" field.
func (m *AccountMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *AccountMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *AccountMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *AccountMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *AccountMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by ids.
func (m *AccountMutation) AddTransactionIDs(ids ...int) {
	if m.transactions == nil {
		m.transactions = make(map[int]struct{})
	}
	for i := range ids {
		m.transactions[ids[i]] = struct{}{}
	}
}

// ClearTransactions clears the "transactions" edge to the Transaction entity.
func (m *AccountMutation) ClearTransactions() {
	m.clearedtransactions = true
}

// TransactionsCleared reports if the "transactions" edge to the Transaction entity was cleared.
func (m *AccountMutation) TransactionsCleared() bool {
	return m.clearedtransactions
}

// RemoveTransactionIDs removes the "transactions" edge to the Transaction entity by IDs.
func (m *AccountMutation) RemoveTransactionIDs(ids ...int) {
	if m.removedtransactions == nil {
		m.removedtransactions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.transactions, ids[i])
		m.removedtransactions[ids[i]] = struct{}{}
	}
}

// RemovedTransactions returns the removed IDs of the "transactions" edge to the Transaction entity.
func (m *AccountMutation) RemovedTransactionsIDs() (ids []int) {
	for id := range m.removedtransactions {
		ids = append(ids, id)
	}
	return
}

// TransactionsIDs returns the "transactions" edge IDs in the mutation.
func (m *AccountMutation) TransactionsIDs() (ids []int) {
	for id := range m.transactions {
		ids = append(ids, id)
	}
	return
}

// ResetTransactions resets all changes to the "transactions" edge.
func (m *AccountMutation) ResetTransactions() {
	m.transactions = nil
	m.clearedtransactions = false
	m.removedtransactions = nil
}

// AddTransferIDs adds the "transfers" edge to the Transfer entity by ids.
func (m *AccountMutation) AddTransferIDs(ids ...int) {
	if m.transfers == nil {
		m.transfers = make(map[int]struct{})
	}
	for i := range ids {
		m.transfers[ids[i]] = struct{}{}
	}
}

// ClearTransfers clears the "transfers" edge to the Transfer entity.
func (m *AccountMutation) ClearTransfers() {
	m.clearedtransfers = true
}

// TransfersCleared reports if the "transfers" edge to the Transfer entity was cleared.
func (m *AccountMutation) TransfersCleared() bool {
	return m.clearedtransfers
}

// RemoveTransferIDs removes the "transfers" edge to the Transfer entity by IDs.
func (m *AccountMutation) RemoveTransferIDs(ids ...int) {
	if m.removedtransfers == nil {
		m.removedtransfers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.transfers, ids[i])
		m.removedtransfers[ids[i]] = struct{}{}
	}
}

// RemovedTransfers returns the removed IDs of the "transfers" edge to the Transfer entity.
func (m *AccountMutation) RemovedTransfersIDs() (ids []int) {
	for id := range m.removedtransfers {
		ids = append(ids, id)
	}
	return
}

// TransfersIDs returns the "transfers" edge IDs in the mutation.
func (m *AccountMutation) TransfersIDs() (ids []int) {
	for id := range m.transfers {
		ids = append(ids, id)
	}
	return
}

// ResetTransfers resets all changes to the "transfers" edge.
func (m *AccountMutation) ResetTransfers() {
	m.transfers = nil
	m.clearedtransfers = false
	m.removedtransfers = nil
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Account, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.token != nil {
		fields = append(fields, account.FieldToken)
	}
	if m.amount != nil {
		fields = append(fields, account.FieldAmount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldToken:
		return m.Token()
	case account.FieldAmount:
		return m.Amount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldToken:
		return m.OldToken(ctx)
	case account.FieldAmount:
		return m.OldAmount(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case account.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, account.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case account.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case account.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldToken:
		m.ResetToken()
		return nil
	case account.FieldAmount:
		m.ResetAmount()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.transactions != nil {
		edges = append(edges, account.EdgeTransactions)
	}
	if m.transfers != nil {
		edges = append(edges, account.EdgeTransfers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case account.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.transactions))
		for id := range m.transactions {
			ids = append(ids, id)
		}
		return ids
	case account.EdgeTransfers:
		ids := make([]ent.Value, 0, len(m.transfers))
		for id := range m.transfers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtransactions != nil {
		edges = append(edges, account.EdgeTransactions)
	}
	if m.removedtransfers != nil {
		edges = append(edges, account.EdgeTransfers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case account.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.removedtransactions))
		for id := range m.removedtransactions {
			ids = append(ids, id)
		}
		return ids
	case account.EdgeTransfers:
		ids := make([]ent.Value, 0, len(m.removedtransfers))
		for id := range m.removedtransfers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtransactions {
		edges = append(edges, account.EdgeTransactions)
	}
	if m.clearedtransfers {
		edges = append(edges, account.EdgeTransfers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	switch name {
	case account.EdgeTransactions:
		return m.clearedtransactions
	case account.EdgeTransfers:
		return m.clearedtransfers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	switch name {
	case account.EdgeTransactions:
		m.ResetTransactions()
		return nil
	case account.EdgeTransfers:
		m.ResetTransfers()
		return nil
	}
	return fmt.Errorf("unknown Account edge %s", name)
}

// BlockMutation represents an operation that mutates the Block nodes in the graph.
type BlockMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	hash                *string
	time                *time.Time
	total_txs           *int
	addtotal_txs        *int
	num_txs             *int
	addnum_txs          *int
	created_at          *time.Time
	clearedFields       map[string]struct{}
	transactions        map[int]struct{}
	removedtransactions map[int]struct{}
	clearedtransactions bool
	done                bool
	oldValue            func(context.Context) (*Block, error)
	predicates          []predicate.Block
}

var _ ent.Mutation = (*BlockMutation)(nil)

// blockOption allows management of the mutation configuration using functional options.
type blockOption func(*BlockMutation)

// newBlockMutation creates new mutation for the Block entity.
func newBlockMutation(c config, op Op, opts ...blockOption) *BlockMutation {
	m := &BlockMutation{
		config:        c,
		op:            op,
		typ:           TypeBlock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlockID sets the ID field of the mutation.
func withBlockID(id int) blockOption {
	return func(m *BlockMutation) {
		var (
			err   error
			once  sync.Once
			value *Block
		)
		m.oldValue = func(ctx context.Context) (*Block, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Block.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlock sets the old Block of the mutation.
func withBlock(node *Block) blockOption {
	return func(m *BlockMutation) {
		m.oldValue = func(context.Context) (*Block, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Block entities.
func (m *BlockMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlockMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlockMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Block.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHash sets the "hash" field.
func (m *BlockMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *BlockMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *BlockMutation) ResetHash() {
	m.hash = nil
}

// SetTime sets the "time" field.
func (m *BlockMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *BlockMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *BlockMutation) ResetTime() {
	m.time = nil
}

// SetTotalTxs sets the "total_txs" field.
func (m *BlockMutation) SetTotalTxs(i int) {
	m.total_txs = &i
	m.addtotal_txs = nil
}

// TotalTxs returns the value of the "total_txs" field in the mutation.
func (m *BlockMutation) TotalTxs() (r int, exists bool) {
	v := m.total_txs
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalTxs returns the old "total_txs" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldTotalTxs(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalTxs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalTxs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalTxs: %w", err)
	}
	return oldValue.TotalTxs, nil
}

// AddTotalTxs adds i to the "total_txs" field.
func (m *BlockMutation) AddTotalTxs(i int) {
	if m.addtotal_txs != nil {
		*m.addtotal_txs += i
	} else {
		m.addtotal_txs = &i
	}
}

// AddedTotalTxs returns the value that was added to the "total_txs" field in this mutation.
func (m *BlockMutation) AddedTotalTxs() (r int, exists bool) {
	v := m.addtotal_txs
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalTxs resets all changes to the "total_txs" field.
func (m *BlockMutation) ResetTotalTxs() {
	m.total_txs = nil
	m.addtotal_txs = nil
}

// SetNumTxs sets the "num_txs" field.
func (m *BlockMutation) SetNumTxs(i int) {
	m.num_txs = &i
	m.addnum_txs = nil
}

// NumTxs returns the value of the "num_txs" field in the mutation.
func (m *BlockMutation) NumTxs() (r int, exists bool) {
	v := m.num_txs
	if v == nil {
		return
	}
	return *v, true
}

// OldNumTxs returns the old "num_txs" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldNumTxs(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumTxs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumTxs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumTxs: %w", err)
	}
	return oldValue.NumTxs, nil
}

// AddNumTxs adds i to the "num_txs" field.
func (m *BlockMutation) AddNumTxs(i int) {
	if m.addnum_txs != nil {
		*m.addnum_txs += i
	} else {
		m.addnum_txs = &i
	}
}

// AddedNumTxs returns the value that was added to the "num_txs" field in this mutation.
func (m *BlockMutation) AddedNumTxs() (r int, exists bool) {
	v := m.addnum_txs
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumTxs resets all changes to the "num_txs" field.
func (m *BlockMutation) ResetNumTxs() {
	m.num_txs = nil
	m.addnum_txs = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BlockMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BlockMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BlockMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by ids.
func (m *BlockMutation) AddTransactionIDs(ids ...int) {
	if m.transactions == nil {
		m.transactions = make(map[int]struct{})
	}
	for i := range ids {
		m.transactions[ids[i]] = struct{}{}
	}
}

// ClearTransactions clears the "transactions" edge to the Transaction entity.
func (m *BlockMutation) ClearTransactions() {
	m.clearedtransactions = true
}

// TransactionsCleared reports if the "transactions" edge to the Transaction entity was cleared.
func (m *BlockMutation) TransactionsCleared() bool {
	return m.clearedtransactions
}

// RemoveTransactionIDs removes the "transactions" edge to the Transaction entity by IDs.
func (m *BlockMutation) RemoveTransactionIDs(ids ...int) {
	if m.removedtransactions == nil {
		m.removedtransactions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.transactions, ids[i])
		m.removedtransactions[ids[i]] = struct{}{}
	}
}

// RemovedTransactions returns the removed IDs of the "transactions" edge to the Transaction entity.
func (m *BlockMutation) RemovedTransactionsIDs() (ids []int) {
	for id := range m.removedtransactions {
		ids = append(ids, id)
	}
	return
}

// TransactionsIDs returns the "transactions" edge IDs in the mutation.
func (m *BlockMutation) TransactionsIDs() (ids []int) {
	for id := range m.transactions {
		ids = append(ids, id)
	}
	return
}

// ResetTransactions resets all changes to the "transactions" edge.
func (m *BlockMutation) ResetTransactions() {
	m.transactions = nil
	m.clearedtransactions = false
	m.removedtransactions = nil
}

// Where appends a list predicates to the BlockMutation builder.
func (m *BlockMutation) Where(ps ...predicate.Block) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BlockMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BlockMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Block, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BlockMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BlockMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Block).
func (m *BlockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlockMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.hash != nil {
		fields = append(fields, block.FieldHash)
	}
	if m.time != nil {
		fields = append(fields, block.FieldTime)
	}
	if m.total_txs != nil {
		fields = append(fields, block.FieldTotalTxs)
	}
	if m.num_txs != nil {
		fields = append(fields, block.FieldNumTxs)
	}
	if m.created_at != nil {
		fields = append(fields, block.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case block.FieldHash:
		return m.Hash()
	case block.FieldTime:
		return m.Time()
	case block.FieldTotalTxs:
		return m.TotalTxs()
	case block.FieldNumTxs:
		return m.NumTxs()
	case block.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case block.FieldHash:
		return m.OldHash(ctx)
	case block.FieldTime:
		return m.OldTime(ctx)
	case block.FieldTotalTxs:
		return m.OldTotalTxs(ctx)
	case block.FieldNumTxs:
		return m.OldNumTxs(ctx)
	case block.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Block field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case block.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case block.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case block.FieldTotalTxs:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalTxs(v)
		return nil
	case block.FieldNumTxs:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumTxs(v)
		return nil
	case block.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Block field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlockMutation) AddedFields() []string {
	var fields []string
	if m.addtotal_txs != nil {
		fields = append(fields, block.FieldTotalTxs)
	}
	if m.addnum_txs != nil {
		fields = append(fields, block.FieldNumTxs)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlockMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case block.FieldTotalTxs:
		return m.AddedTotalTxs()
	case block.FieldNumTxs:
		return m.AddedNumTxs()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlockMutation) AddField(name string, value ent.Value) error {
	switch name {
	case block.FieldTotalTxs:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalTxs(v)
		return nil
	case block.FieldNumTxs:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumTxs(v)
		return nil
	}
	return fmt.Errorf("unknown Block numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlockMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlockMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Block nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlockMutation) ResetField(name string) error {
	switch name {
	case block.FieldHash:
		m.ResetHash()
		return nil
	case block.FieldTime:
		m.ResetTime()
		return nil
	case block.FieldTotalTxs:
		m.ResetTotalTxs()
		return nil
	case block.FieldNumTxs:
		m.ResetNumTxs()
		return nil
	case block.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Block field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlockMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.transactions != nil {
		edges = append(edges, block.EdgeTransactions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlockMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case block.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.transactions))
		for id := range m.transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtransactions != nil {
		edges = append(edges, block.EdgeTransactions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlockMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case block.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.removedtransactions))
		for id := range m.removedtransactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtransactions {
		edges = append(edges, block.EdgeTransactions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlockMutation) EdgeCleared(name string) bool {
	switch name {
	case block.EdgeTransactions:
		return m.clearedtransactions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlockMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Block unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlockMutation) ResetEdge(name string) error {
	switch name {
	case block.EdgeTransactions:
		m.ResetTransactions()
		return nil
	}
	return fmt.Errorf("unknown Block edge %s", name)
}

// RestoreHistoryMutation represents an operation that mutates the RestoreHistory nodes in the graph.
type RestoreHistoryMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	restore_range_start    *int
	addrestore_range_start *int
	restore_range_end      *int
	addrestore_range_end   *int
	being_block            *int
	addbeing_block         *int
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*RestoreHistory, error)
	predicates             []predicate.RestoreHistory
}

var _ ent.Mutation = (*RestoreHistoryMutation)(nil)

// restorehistoryOption allows management of the mutation configuration using functional options.
type restorehistoryOption func(*RestoreHistoryMutation)

// newRestoreHistoryMutation creates new mutation for the RestoreHistory entity.
func newRestoreHistoryMutation(c config, op Op, opts ...restorehistoryOption) *RestoreHistoryMutation {
	m := &RestoreHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeRestoreHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRestoreHistoryID sets the ID field of the mutation.
func withRestoreHistoryID(id int) restorehistoryOption {
	return func(m *RestoreHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *RestoreHistory
		)
		m.oldValue = func(ctx context.Context) (*RestoreHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RestoreHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRestoreHistory sets the old RestoreHistory of the mutation.
func withRestoreHistory(node *RestoreHistory) restorehistoryOption {
	return func(m *RestoreHistoryMutation) {
		m.oldValue = func(context.Context) (*RestoreHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RestoreHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RestoreHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RestoreHistory entities.
func (m *RestoreHistoryMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RestoreHistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RestoreHistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RestoreHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRestoreRangeStart sets the "restore_range_start" field.
func (m *RestoreHistoryMutation) SetRestoreRangeStart(i int) {
	m.restore_range_start = &i
	m.addrestore_range_start = nil
}

// RestoreRangeStart returns the value of the "restore_range_start" field in the mutation.
func (m *RestoreHistoryMutation) RestoreRangeStart() (r int, exists bool) {
	v := m.restore_range_start
	if v == nil {
		return
	}
	return *v, true
}

// OldRestoreRangeStart returns the old "restore_range_start" field's value of the RestoreHistory entity.
// If the RestoreHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RestoreHistoryMutation) OldRestoreRangeStart(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRestoreRangeStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRestoreRangeStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRestoreRangeStart: %w", err)
	}
	return oldValue.RestoreRangeStart, nil
}

// AddRestoreRangeStart adds i to the "restore_range_start" field.
func (m *RestoreHistoryMutation) AddRestoreRangeStart(i int) {
	if m.addrestore_range_start != nil {
		*m.addrestore_range_start += i
	} else {
		m.addrestore_range_start = &i
	}
}

// AddedRestoreRangeStart returns the value that was added to the "restore_range_start" field in this mutation.
func (m *RestoreHistoryMutation) AddedRestoreRangeStart() (r int, exists bool) {
	v := m.addrestore_range_start
	if v == nil {
		return
	}
	return *v, true
}

// ResetRestoreRangeStart resets all changes to the "restore_range_start" field.
func (m *RestoreHistoryMutation) ResetRestoreRangeStart() {
	m.restore_range_start = nil
	m.addrestore_range_start = nil
}

// SetRestoreRangeEnd sets the "restore_range_end" field.
func (m *RestoreHistoryMutation) SetRestoreRangeEnd(i int) {
	m.restore_range_end = &i
	m.addrestore_range_end = nil
}

// RestoreRangeEnd returns the value of the "restore_range_end" field in the mutation.
func (m *RestoreHistoryMutation) RestoreRangeEnd() (r int, exists bool) {
	v := m.restore_range_end
	if v == nil {
		return
	}
	return *v, true
}

// OldRestoreRangeEnd returns the old "restore_range_end" field's value of the RestoreHistory entity.
// If the RestoreHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RestoreHistoryMutation) OldRestoreRangeEnd(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRestoreRangeEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRestoreRangeEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRestoreRangeEnd: %w", err)
	}
	return oldValue.RestoreRangeEnd, nil
}

// AddRestoreRangeEnd adds i to the "restore_range_end" field.
func (m *RestoreHistoryMutation) AddRestoreRangeEnd(i int) {
	if m.addrestore_range_end != nil {
		*m.addrestore_range_end += i
	} else {
		m.addrestore_range_end = &i
	}
}

// AddedRestoreRangeEnd returns the value that was added to the "restore_range_end" field in this mutation.
func (m *RestoreHistoryMutation) AddedRestoreRangeEnd() (r int, exists bool) {
	v := m.addrestore_range_end
	if v == nil {
		return
	}
	return *v, true
}

// ResetRestoreRangeEnd resets all changes to the "restore_range_end" field.
func (m *RestoreHistoryMutation) ResetRestoreRangeEnd() {
	m.restore_range_end = nil
	m.addrestore_range_end = nil
}

// SetBeingBlock sets the "being_block" field.
func (m *RestoreHistoryMutation) SetBeingBlock(i int) {
	m.being_block = &i
	m.addbeing_block = nil
}

// BeingBlock returns the value of the "being_block" field in the mutation.
func (m *RestoreHistoryMutation) BeingBlock() (r int, exists bool) {
	v := m.being_block
	if v == nil {
		return
	}
	return *v, true
}

// OldBeingBlock returns the old "being_block" field's value of the RestoreHistory entity.
// If the RestoreHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RestoreHistoryMutation) OldBeingBlock(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBeingBlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBeingBlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBeingBlock: %w", err)
	}
	return oldValue.BeingBlock, nil
}

// AddBeingBlock adds i to the "being_block" field.
func (m *RestoreHistoryMutation) AddBeingBlock(i int) {
	if m.addbeing_block != nil {
		*m.addbeing_block += i
	} else {
		m.addbeing_block = &i
	}
}

// AddedBeingBlock returns the value that was added to the "being_block" field in this mutation.
func (m *RestoreHistoryMutation) AddedBeingBlock() (r int, exists bool) {
	v := m.addbeing_block
	if v == nil {
		return
	}
	return *v, true
}

// ResetBeingBlock resets all changes to the "being_block" field.
func (m *RestoreHistoryMutation) ResetBeingBlock() {
	m.being_block = nil
	m.addbeing_block = nil
}

// Where appends a list predicates to the RestoreHistoryMutation builder.
func (m *RestoreHistoryMutation) Where(ps ...predicate.RestoreHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RestoreHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RestoreHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RestoreHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RestoreHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RestoreHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RestoreHistory).
func (m *RestoreHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RestoreHistoryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.restore_range_start != nil {
		fields = append(fields, restorehistory.FieldRestoreRangeStart)
	}
	if m.restore_range_end != nil {
		fields = append(fields, restorehistory.FieldRestoreRangeEnd)
	}
	if m.being_block != nil {
		fields = append(fields, restorehistory.FieldBeingBlock)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RestoreHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case restorehistory.FieldRestoreRangeStart:
		return m.RestoreRangeStart()
	case restorehistory.FieldRestoreRangeEnd:
		return m.RestoreRangeEnd()
	case restorehistory.FieldBeingBlock:
		return m.BeingBlock()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RestoreHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case restorehistory.FieldRestoreRangeStart:
		return m.OldRestoreRangeStart(ctx)
	case restorehistory.FieldRestoreRangeEnd:
		return m.OldRestoreRangeEnd(ctx)
	case restorehistory.FieldBeingBlock:
		return m.OldBeingBlock(ctx)
	}
	return nil, fmt.Errorf("unknown RestoreHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RestoreHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case restorehistory.FieldRestoreRangeStart:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRestoreRangeStart(v)
		return nil
	case restorehistory.FieldRestoreRangeEnd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRestoreRangeEnd(v)
		return nil
	case restorehistory.FieldBeingBlock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBeingBlock(v)
		return nil
	}
	return fmt.Errorf("unknown RestoreHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RestoreHistoryMutation) AddedFields() []string {
	var fields []string
	if m.addrestore_range_start != nil {
		fields = append(fields, restorehistory.FieldRestoreRangeStart)
	}
	if m.addrestore_range_end != nil {
		fields = append(fields, restorehistory.FieldRestoreRangeEnd)
	}
	if m.addbeing_block != nil {
		fields = append(fields, restorehistory.FieldBeingBlock)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RestoreHistoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case restorehistory.FieldRestoreRangeStart:
		return m.AddedRestoreRangeStart()
	case restorehistory.FieldRestoreRangeEnd:
		return m.AddedRestoreRangeEnd()
	case restorehistory.FieldBeingBlock:
		return m.AddedBeingBlock()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RestoreHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case restorehistory.FieldRestoreRangeStart:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRestoreRangeStart(v)
		return nil
	case restorehistory.FieldRestoreRangeEnd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRestoreRangeEnd(v)
		return nil
	case restorehistory.FieldBeingBlock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBeingBlock(v)
		return nil
	}
	return fmt.Errorf("unknown RestoreHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RestoreHistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RestoreHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RestoreHistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RestoreHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RestoreHistoryMutation) ResetField(name string) error {
	switch name {
	case restorehistory.FieldRestoreRangeStart:
		m.ResetRestoreRangeStart()
		return nil
	case restorehistory.FieldRestoreRangeEnd:
		m.ResetRestoreRangeEnd()
		return nil
	case restorehistory.FieldBeingBlock:
		m.ResetBeingBlock()
		return nil
	}
	return fmt.Errorf("unknown RestoreHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RestoreHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RestoreHistoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RestoreHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RestoreHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RestoreHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RestoreHistoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RestoreHistoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RestoreHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RestoreHistoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RestoreHistory edge %s", name)
}

// TransactionMutation represents an operation that mutates the Transaction nodes in the graph.
type TransactionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	index           *int
	addindex        *int
	hash            *string
	success         *bool
	block_height    *int
	addblock_height *int
	gas_wanted      *float64
	addgas_wanted   *float64
	gas_used        *float64
	addgas_used     *float64
	memo            *string
	gas_fee         *schema.GasFee
	messages        *[]schema.Message
	appendmessages  []schema.Message
	response        *schema.Response
	created_at      *time.Time
	clearedFields   map[string]struct{}
	block           *int
	clearedblock    bool
	done            bool
	oldValue        func(context.Context) (*Transaction, error)
	predicates      []predicate.Transaction
}

var _ ent.Mutation = (*TransactionMutation)(nil)

// transactionOption allows management of the mutation configuration using functional options.
type transactionOption func(*TransactionMutation)

// newTransactionMutation creates new mutation for the Transaction entity.
func newTransactionMutation(c config, op Op, opts ...transactionOption) *TransactionMutation {
	m := &TransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransactionID sets the ID field of the mutation.
func withTransactionID(id int) transactionOption {
	return func(m *TransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *Transaction
		)
		m.oldValue = func(ctx context.Context) (*Transaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransaction sets the old Transaction of the mutation.
func withTransaction(node *Transaction) transactionOption {
	return func(m *TransactionMutation) {
		m.oldValue = func(context.Context) (*Transaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransactionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransactionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndex sets the "index" field.
func (m *TransactionMutation) SetIndex(i int) {
	m.index = &i
	m.addindex = nil
}

// Index returns the value of the "index" field in the mutation.
func (m *TransactionMutation) Index() (r int, exists bool) {
	v := m.index
	if v == nil {
		return
	}
	return *v, true
}

// OldIndex returns the old "index" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndex: %w", err)
	}
	return oldValue.Index, nil
}

// AddIndex adds i to the "index" field.
func (m *TransactionMutation) AddIndex(i int) {
	if m.addindex != nil {
		*m.addindex += i
	} else {
		m.addindex = &i
	}
}

// AddedIndex returns the value that was added to the "index" field in this mutation.
func (m *TransactionMutation) AddedIndex() (r int, exists bool) {
	v := m.addindex
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndex resets all changes to the "index" field.
func (m *TransactionMutation) ResetIndex() {
	m.index = nil
	m.addindex = nil
}

// SetHash sets the "hash" field.
func (m *TransactionMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *TransactionMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *TransactionMutation) ResetHash() {
	m.hash = nil
}

// SetSuccess sets the "success" field.
func (m *TransactionMutation) SetSuccess(b bool) {
	m.success = &b
}

// Success returns the value of the "success" field in the mutation.
func (m *TransactionMutation) Success() (r bool, exists bool) {
	v := m.success
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccess returns the old "success" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldSuccess(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccess: %w", err)
	}
	return oldValue.Success, nil
}

// ResetSuccess resets all changes to the "success" field.
func (m *TransactionMutation) ResetSuccess() {
	m.success = nil
}

// SetBlockHeight sets the "block_height" field.
func (m *TransactionMutation) SetBlockHeight(i int) {
	m.block_height = &i
	m.addblock_height = nil
}

// BlockHeight returns the value of the "block_height" field in the mutation.
func (m *TransactionMutation) BlockHeight() (r int, exists bool) {
	v := m.block_height
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockHeight returns the old "block_height" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldBlockHeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockHeight: %w", err)
	}
	return oldValue.BlockHeight, nil
}

// AddBlockHeight adds i to the "block_height" field.
func (m *TransactionMutation) AddBlockHeight(i int) {
	if m.addblock_height != nil {
		*m.addblock_height += i
	} else {
		m.addblock_height = &i
	}
}

// AddedBlockHeight returns the value that was added to the "block_height" field in this mutation.
func (m *TransactionMutation) AddedBlockHeight() (r int, exists bool) {
	v := m.addblock_height
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlockHeight resets all changes to the "block_height" field.
func (m *TransactionMutation) ResetBlockHeight() {
	m.block_height = nil
	m.addblock_height = nil
}

// SetGasWanted sets the "gas_wanted" field.
func (m *TransactionMutation) SetGasWanted(f float64) {
	m.gas_wanted = &f
	m.addgas_wanted = nil
}

// GasWanted returns the value of the "gas_wanted" field in the mutation.
func (m *TransactionMutation) GasWanted() (r float64, exists bool) {
	v := m.gas_wanted
	if v == nil {
		return
	}
	return *v, true
}

// OldGasWanted returns the old "gas_wanted" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldGasWanted(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGasWanted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGasWanted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasWanted: %w", err)
	}
	return oldValue.GasWanted, nil
}

// AddGasWanted adds f to the "gas_wanted" field.
func (m *TransactionMutation) AddGasWanted(f float64) {
	if m.addgas_wanted != nil {
		*m.addgas_wanted += f
	} else {
		m.addgas_wanted = &f
	}
}

// AddedGasWanted returns the value that was added to the "gas_wanted" field in this mutation.
func (m *TransactionMutation) AddedGasWanted() (r float64, exists bool) {
	v := m.addgas_wanted
	if v == nil {
		return
	}
	return *v, true
}

// ResetGasWanted resets all changes to the "gas_wanted" field.
func (m *TransactionMutation) ResetGasWanted() {
	m.gas_wanted = nil
	m.addgas_wanted = nil
}

// SetGasUsed sets the "gas_used" field.
func (m *TransactionMutation) SetGasUsed(f float64) {
	m.gas_used = &f
	m.addgas_used = nil
}

// GasUsed returns the value of the "gas_used" field in the mutation.
func (m *TransactionMutation) GasUsed() (r float64, exists bool) {
	v := m.gas_used
	if v == nil {
		return
	}
	return *v, true
}

// OldGasUsed returns the old "gas_used" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldGasUsed(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGasUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGasUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasUsed: %w", err)
	}
	return oldValue.GasUsed, nil
}

// AddGasUsed adds f to the "gas_used" field.
func (m *TransactionMutation) AddGasUsed(f float64) {
	if m.addgas_used != nil {
		*m.addgas_used += f
	} else {
		m.addgas_used = &f
	}
}

// AddedGasUsed returns the value that was added to the "gas_used" field in this mutation.
func (m *TransactionMutation) AddedGasUsed() (r float64, exists bool) {
	v := m.addgas_used
	if v == nil {
		return
	}
	return *v, true
}

// ResetGasUsed resets all changes to the "gas_used" field.
func (m *TransactionMutation) ResetGasUsed() {
	m.gas_used = nil
	m.addgas_used = nil
}

// SetMemo sets the "memo" field.
func (m *TransactionMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *TransactionMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *TransactionMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[transaction.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *TransactionMutation) MemoCleared() bool {
	_, ok := m.clearedFields[transaction.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *TransactionMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, transaction.FieldMemo)
}

// SetGasFee sets the "gas_fee" field.
func (m *TransactionMutation) SetGasFee(sf schema.GasFee) {
	m.gas_fee = &sf
}

// GasFee returns the value of the "gas_fee" field in the mutation.
func (m *TransactionMutation) GasFee() (r schema.GasFee, exists bool) {
	v := m.gas_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldGasFee returns the old "gas_fee" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldGasFee(ctx context.Context) (v schema.GasFee, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGasFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGasFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasFee: %w", err)
	}
	return oldValue.GasFee, nil
}

// ClearGasFee clears the value of the "gas_fee" field.
func (m *TransactionMutation) ClearGasFee() {
	m.gas_fee = nil
	m.clearedFields[transaction.FieldGasFee] = struct{}{}
}

// GasFeeCleared returns if the "gas_fee" field was cleared in this mutation.
func (m *TransactionMutation) GasFeeCleared() bool {
	_, ok := m.clearedFields[transaction.FieldGasFee]
	return ok
}

// ResetGasFee resets all changes to the "gas_fee" field.
func (m *TransactionMutation) ResetGasFee() {
	m.gas_fee = nil
	delete(m.clearedFields, transaction.FieldGasFee)
}

// SetMessages sets the "messages" field.
func (m *TransactionMutation) SetMessages(s []schema.Message) {
	m.messages = &s
	m.appendmessages = nil
}

// Messages returns the value of the "messages" field in the mutation.
func (m *TransactionMutation) Messages() (r []schema.Message, exists bool) {
	v := m.messages
	if v == nil {
		return
	}
	return *v, true
}

// OldMessages returns the old "messages" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldMessages(ctx context.Context) (v []schema.Message, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessages: %w", err)
	}
	return oldValue.Messages, nil
}

// AppendMessages adds s to the "messages" field.
func (m *TransactionMutation) AppendMessages(s []schema.Message) {
	m.appendmessages = append(m.appendmessages, s...)
}

// AppendedMessages returns the list of values that were appended to the "messages" field in this mutation.
func (m *TransactionMutation) AppendedMessages() ([]schema.Message, bool) {
	if len(m.appendmessages) == 0 {
		return nil, false
	}
	return m.appendmessages, true
}

// ClearMessages clears the value of the "messages" field.
func (m *TransactionMutation) ClearMessages() {
	m.messages = nil
	m.appendmessages = nil
	m.clearedFields[transaction.FieldMessages] = struct{}{}
}

// MessagesCleared returns if the "messages" field was cleared in this mutation.
func (m *TransactionMutation) MessagesCleared() bool {
	_, ok := m.clearedFields[transaction.FieldMessages]
	return ok
}

// ResetMessages resets all changes to the "messages" field.
func (m *TransactionMutation) ResetMessages() {
	m.messages = nil
	m.appendmessages = nil
	delete(m.clearedFields, transaction.FieldMessages)
}

// SetResponse sets the "response" field.
func (m *TransactionMutation) SetResponse(s schema.Response) {
	m.response = &s
}

// Response returns the value of the "response" field in the mutation.
func (m *TransactionMutation) Response() (r schema.Response, exists bool) {
	v := m.response
	if v == nil {
		return
	}
	return *v, true
}

// OldResponse returns the old "response" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldResponse(ctx context.Context) (v schema.Response, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponse: %w", err)
	}
	return oldValue.Response, nil
}

// ClearResponse clears the value of the "response" field.
func (m *TransactionMutation) ClearResponse() {
	m.response = nil
	m.clearedFields[transaction.FieldResponse] = struct{}{}
}

// ResponseCleared returns if the "response" field was cleared in this mutation.
func (m *TransactionMutation) ResponseCleared() bool {
	_, ok := m.clearedFields[transaction.FieldResponse]
	return ok
}

// ResetResponse resets all changes to the "response" field.
func (m *TransactionMutation) ResetResponse() {
	m.response = nil
	delete(m.clearedFields, transaction.FieldResponse)
}

// SetCreatedAt sets the "created_at" field.
func (m *TransactionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TransactionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TransactionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetBlockID sets the "block" edge to the Block entity by id.
func (m *TransactionMutation) SetBlockID(id int) {
	m.block = &id
}

// ClearBlock clears the "block" edge to the Block entity.
func (m *TransactionMutation) ClearBlock() {
	m.clearedblock = true
}

// BlockCleared reports if the "block" edge to the Block entity was cleared.
func (m *TransactionMutation) BlockCleared() bool {
	return m.clearedblock
}

// BlockID returns the "block" edge ID in the mutation.
func (m *TransactionMutation) BlockID() (id int, exists bool) {
	if m.block != nil {
		return *m.block, true
	}
	return
}

// BlockIDs returns the "block" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BlockID instead. It exists only for internal usage by the builders.
func (m *TransactionMutation) BlockIDs() (ids []int) {
	if id := m.block; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBlock resets all changes to the "block" edge.
func (m *TransactionMutation) ResetBlock() {
	m.block = nil
	m.clearedblock = false
}

// Where appends a list predicates to the TransactionMutation builder.
func (m *TransactionMutation) Where(ps ...predicate.Transaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TransactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TransactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Transaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TransactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TransactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Transaction).
func (m *TransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransactionMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.index != nil {
		fields = append(fields, transaction.FieldIndex)
	}
	if m.hash != nil {
		fields = append(fields, transaction.FieldHash)
	}
	if m.success != nil {
		fields = append(fields, transaction.FieldSuccess)
	}
	if m.block_height != nil {
		fields = append(fields, transaction.FieldBlockHeight)
	}
	if m.gas_wanted != nil {
		fields = append(fields, transaction.FieldGasWanted)
	}
	if m.gas_used != nil {
		fields = append(fields, transaction.FieldGasUsed)
	}
	if m.memo != nil {
		fields = append(fields, transaction.FieldMemo)
	}
	if m.gas_fee != nil {
		fields = append(fields, transaction.FieldGasFee)
	}
	if m.messages != nil {
		fields = append(fields, transaction.FieldMessages)
	}
	if m.response != nil {
		fields = append(fields, transaction.FieldResponse)
	}
	if m.created_at != nil {
		fields = append(fields, transaction.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldIndex:
		return m.Index()
	case transaction.FieldHash:
		return m.Hash()
	case transaction.FieldSuccess:
		return m.Success()
	case transaction.FieldBlockHeight:
		return m.BlockHeight()
	case transaction.FieldGasWanted:
		return m.GasWanted()
	case transaction.FieldGasUsed:
		return m.GasUsed()
	case transaction.FieldMemo:
		return m.Memo()
	case transaction.FieldGasFee:
		return m.GasFee()
	case transaction.FieldMessages:
		return m.Messages()
	case transaction.FieldResponse:
		return m.Response()
	case transaction.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transaction.FieldIndex:
		return m.OldIndex(ctx)
	case transaction.FieldHash:
		return m.OldHash(ctx)
	case transaction.FieldSuccess:
		return m.OldSuccess(ctx)
	case transaction.FieldBlockHeight:
		return m.OldBlockHeight(ctx)
	case transaction.FieldGasWanted:
		return m.OldGasWanted(ctx)
	case transaction.FieldGasUsed:
		return m.OldGasUsed(ctx)
	case transaction.FieldMemo:
		return m.OldMemo(ctx)
	case transaction.FieldGasFee:
		return m.OldGasFee(ctx)
	case transaction.FieldMessages:
		return m.OldMessages(ctx)
	case transaction.FieldResponse:
		return m.OldResponse(ctx)
	case transaction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Transaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndex(v)
		return nil
	case transaction.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case transaction.FieldSuccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccess(v)
		return nil
	case transaction.FieldBlockHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockHeight(v)
		return nil
	case transaction.FieldGasWanted:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasWanted(v)
		return nil
	case transaction.FieldGasUsed:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasUsed(v)
		return nil
	case transaction.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case transaction.FieldGasFee:
		v, ok := value.(schema.GasFee)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasFee(v)
		return nil
	case transaction.FieldMessages:
		v, ok := value.([]schema.Message)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessages(v)
		return nil
	case transaction.FieldResponse:
		v, ok := value.(schema.Response)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponse(v)
		return nil
	case transaction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransactionMutation) AddedFields() []string {
	var fields []string
	if m.addindex != nil {
		fields = append(fields, transaction.FieldIndex)
	}
	if m.addblock_height != nil {
		fields = append(fields, transaction.FieldBlockHeight)
	}
	if m.addgas_wanted != nil {
		fields = append(fields, transaction.FieldGasWanted)
	}
	if m.addgas_used != nil {
		fields = append(fields, transaction.FieldGasUsed)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldIndex:
		return m.AddedIndex()
	case transaction.FieldBlockHeight:
		return m.AddedBlockHeight()
	case transaction.FieldGasWanted:
		return m.AddedGasWanted()
	case transaction.FieldGasUsed:
		return m.AddedGasUsed()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndex(v)
		return nil
	case transaction.FieldBlockHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlockHeight(v)
		return nil
	case transaction.FieldGasWanted:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGasWanted(v)
		return nil
	case transaction.FieldGasUsed:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGasUsed(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransactionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(transaction.FieldMemo) {
		fields = append(fields, transaction.FieldMemo)
	}
	if m.FieldCleared(transaction.FieldGasFee) {
		fields = append(fields, transaction.FieldGasFee)
	}
	if m.FieldCleared(transaction.FieldMessages) {
		fields = append(fields, transaction.FieldMessages)
	}
	if m.FieldCleared(transaction.FieldResponse) {
		fields = append(fields, transaction.FieldResponse)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransactionMutation) ClearField(name string) error {
	switch name {
	case transaction.FieldMemo:
		m.ClearMemo()
		return nil
	case transaction.FieldGasFee:
		m.ClearGasFee()
		return nil
	case transaction.FieldMessages:
		m.ClearMessages()
		return nil
	case transaction.FieldResponse:
		m.ClearResponse()
		return nil
	}
	return fmt.Errorf("unknown Transaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransactionMutation) ResetField(name string) error {
	switch name {
	case transaction.FieldIndex:
		m.ResetIndex()
		return nil
	case transaction.FieldHash:
		m.ResetHash()
		return nil
	case transaction.FieldSuccess:
		m.ResetSuccess()
		return nil
	case transaction.FieldBlockHeight:
		m.ResetBlockHeight()
		return nil
	case transaction.FieldGasWanted:
		m.ResetGasWanted()
		return nil
	case transaction.FieldGasUsed:
		m.ResetGasUsed()
		return nil
	case transaction.FieldMemo:
		m.ResetMemo()
		return nil
	case transaction.FieldGasFee:
		m.ResetGasFee()
		return nil
	case transaction.FieldMessages:
		m.ResetMessages()
		return nil
	case transaction.FieldResponse:
		m.ResetResponse()
		return nil
	case transaction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.block != nil {
		edges = append(edges, transaction.EdgeBlock)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransactionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case transaction.EdgeBlock:
		if id := m.block; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedblock {
		edges = append(edges, transaction.EdgeBlock)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransactionMutation) EdgeCleared(name string) bool {
	switch name {
	case transaction.EdgeBlock:
		return m.clearedblock
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransactionMutation) ClearEdge(name string) error {
	switch name {
	case transaction.EdgeBlock:
		m.ClearBlock()
		return nil
	}
	return fmt.Errorf("unknown Transaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransactionMutation) ResetEdge(name string) error {
	switch name {
	case transaction.EdgeBlock:
		m.ResetBlock()
		return nil
	}
	return fmt.Errorf("unknown Transaction edge %s", name)
}

// TransferMutation represents an operation that mutates the Transfer nodes in the graph.
type TransferMutation struct {
	config
	op             Op
	typ            string
	id             *int
	from_address   *string
	to_address     *string
	token          *string
	amount         *float64
	addamount      *float64
	denom          *string
	created_at     *time.Time
	clearedFields  map[string]struct{}
	account        *string
	clearedaccount bool
	done           bool
	oldValue       func(context.Context) (*Transfer, error)
	predicates     []predicate.Transfer
}

var _ ent.Mutation = (*TransferMutation)(nil)

// transferOption allows management of the mutation configuration using functional options.
type transferOption func(*TransferMutation)

// newTransferMutation creates new mutation for the Transfer entity.
func newTransferMutation(c config, op Op, opts ...transferOption) *TransferMutation {
	m := &TransferMutation{
		config:        c,
		op:            op,
		typ:           TypeTransfer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransferID sets the ID field of the mutation.
func withTransferID(id int) transferOption {
	return func(m *TransferMutation) {
		var (
			err   error
			once  sync.Once
			value *Transfer
		)
		m.oldValue = func(ctx context.Context) (*Transfer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transfer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransfer sets the old Transfer of the mutation.
func withTransfer(node *Transfer) transferOption {
	return func(m *TransferMutation) {
		m.oldValue = func(context.Context) (*Transfer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Transfer entities.
func (m *TransferMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransferMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransferMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transfer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFromAddress sets the "from_address" field.
func (m *TransferMutation) SetFromAddress(s string) {
	m.from_address = &s
}

// FromAddress returns the value of the "from_address" field in the mutation.
func (m *TransferMutation) FromAddress() (r string, exists bool) {
	v := m.from_address
	if v == nil {
		return
	}
	return *v, true
}

// OldFromAddress returns the old "from_address" field's value of the Transfer entity.
// If the Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransferMutation) OldFromAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromAddress: %w", err)
	}
	return oldValue.FromAddress, nil
}

// ResetFromAddress resets all changes to the "from_address" field.
func (m *TransferMutation) ResetFromAddress() {
	m.from_address = nil
}

// SetToAddress sets the "to_address" field.
func (m *TransferMutation) SetToAddress(s string) {
	m.to_address = &s
}

// ToAddress returns the value of the "to_address" field in the mutation.
func (m *TransferMutation) ToAddress() (r string, exists bool) {
	v := m.to_address
	if v == nil {
		return
	}
	return *v, true
}

// OldToAddress returns the old "to_address" field's value of the Transfer entity.
// If the Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransferMutation) OldToAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToAddress: %w", err)
	}
	return oldValue.ToAddress, nil
}

// ResetToAddress resets all changes to the "to_address" field.
func (m *TransferMutation) ResetToAddress() {
	m.to_address = nil
}

// SetToken sets the "token" field.
func (m *TransferMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *TransferMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Transfer entity.
// If the Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransferMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *TransferMutation) ResetToken() {
	m.token = nil
}

// SetAmount sets the "amount" field.
func (m *TransferMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *TransferMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Transfer entity.
// If the Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransferMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *TransferMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *TransferMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *TransferMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetDenom sets the "denom" field.
func (m *TransferMutation) SetDenom(s string) {
	m.denom = &s
}

// Denom returns the value of the "denom" field in the mutation.
func (m *TransferMutation) Denom() (r string, exists bool) {
	v := m.denom
	if v == nil {
		return
	}
	return *v, true
}

// OldDenom returns the old "denom" field's value of the Transfer entity.
// If the Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransferMutation) OldDenom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDenom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDenom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDenom: %w", err)
	}
	return oldValue.Denom, nil
}

// ResetDenom resets all changes to the "denom" field.
func (m *TransferMutation) ResetDenom() {
	m.denom = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TransferMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TransferMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Transfer entity.
// If the Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransferMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TransferMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetAccountID sets the "account" edge to the Account entity by id.
func (m *TransferMutation) SetAccountID(id string) {
	m.account = &id
}

// ClearAccount clears the "account" edge to the Account entity.
func (m *TransferMutation) ClearAccount() {
	m.clearedaccount = true
}

// AccountCleared reports if the "account" edge to the Account entity was cleared.
func (m *TransferMutation) AccountCleared() bool {
	return m.clearedaccount
}

// AccountID returns the "account" edge ID in the mutation.
func (m *TransferMutation) AccountID() (id string, exists bool) {
	if m.account != nil {
		return *m.account, true
	}
	return
}

// AccountIDs returns the "account" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AccountID instead. It exists only for internal usage by the builders.
func (m *TransferMutation) AccountIDs() (ids []string) {
	if id := m.account; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAccount resets all changes to the "account" edge.
func (m *TransferMutation) ResetAccount() {
	m.account = nil
	m.clearedaccount = false
}

// Where appends a list predicates to the TransferMutation builder.
func (m *TransferMutation) Where(ps ...predicate.Transfer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TransferMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TransferMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Transfer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TransferMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TransferMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Transfer).
func (m *TransferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransferMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.from_address != nil {
		fields = append(fields, transfer.FieldFromAddress)
	}
	if m.to_address != nil {
		fields = append(fields, transfer.FieldToAddress)
	}
	if m.token != nil {
		fields = append(fields, transfer.FieldToken)
	}
	if m.amount != nil {
		fields = append(fields, transfer.FieldAmount)
	}
	if m.denom != nil {
		fields = append(fields, transfer.FieldDenom)
	}
	if m.created_at != nil {
		fields = append(fields, transfer.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transfer.FieldFromAddress:
		return m.FromAddress()
	case transfer.FieldToAddress:
		return m.ToAddress()
	case transfer.FieldToken:
		return m.Token()
	case transfer.FieldAmount:
		return m.Amount()
	case transfer.FieldDenom:
		return m.Denom()
	case transfer.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transfer.FieldFromAddress:
		return m.OldFromAddress(ctx)
	case transfer.FieldToAddress:
		return m.OldToAddress(ctx)
	case transfer.FieldToken:
		return m.OldToken(ctx)
	case transfer.FieldAmount:
		return m.OldAmount(ctx)
	case transfer.FieldDenom:
		return m.OldDenom(ctx)
	case transfer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Transfer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transfer.FieldFromAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromAddress(v)
		return nil
	case transfer.FieldToAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToAddress(v)
		return nil
	case transfer.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case transfer.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case transfer.FieldDenom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDenom(v)
		return nil
	case transfer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Transfer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransferMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, transfer.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransferMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transfer.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransferMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transfer.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Transfer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransferMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransferMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Transfer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransferMutation) ResetField(name string) error {
	switch name {
	case transfer.FieldFromAddress:
		m.ResetFromAddress()
		return nil
	case transfer.FieldToAddress:
		m.ResetToAddress()
		return nil
	case transfer.FieldToken:
		m.ResetToken()
		return nil
	case transfer.FieldAmount:
		m.ResetAmount()
		return nil
	case transfer.FieldDenom:
		m.ResetDenom()
		return nil
	case transfer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Transfer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransferMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.account != nil {
		edges = append(edges, transfer.EdgeAccount)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransferMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case transfer.EdgeAccount:
		if id := m.account; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransferMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaccount {
		edges = append(edges, transfer.EdgeAccount)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransferMutation) EdgeCleared(name string) bool {
	switch name {
	case transfer.EdgeAccount:
		return m.clearedaccount
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransferMutation) ClearEdge(name string) error {
	switch name {
	case transfer.EdgeAccount:
		m.ClearAccount()
		return nil
	}
	return fmt.Errorf("unknown Transfer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransferMutation) ResetEdge(name string) error {
	switch name {
	case transfer.EdgeAccount:
		m.ResetAccount()
		return nil
	}
	return fmt.Errorf("unknown Transfer edge %s", name)
}
