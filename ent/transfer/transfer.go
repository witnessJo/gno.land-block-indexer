// Code generated by ent, DO NOT EDIT.

package transfer

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the transfer type in the database.
	Label = "transfer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldFunc holds the string denoting the func field in the database.
	FieldFunc = "func"
	// FieldFromAddress holds the string denoting the from_address field in the database.
	FieldFromAddress = "from_address"
	// FieldToAddress holds the string denoting the to_address field in the database.
	FieldToAddress = "to_address"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldDenom holds the string denoting the denom field in the database.
	FieldDenom = "denom"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the transfer in the database.
	Table = "transfers"
)

// Columns holds all SQL columns for transfer fields.
var Columns = []string{
	FieldID,
	FieldHash,
	FieldFunc,
	FieldFromAddress,
	FieldToAddress,
	FieldToken,
	FieldAmount,
	FieldDenom,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transfers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"to_address",
	"from_address",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func(string) error
	// FuncValidator is a validator for the "func" field. It is called by the builders before save.
	FuncValidator func(string) error
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(float64) error
	// DenomValidator is a validator for the "denom" field. It is called by the builders before save.
	DenomValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Transfer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByFunc orders the results by the func field.
func ByFunc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFunc, opts...).ToFunc()
}

// ByFromAddress orders the results by the from_address field.
func ByFromAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromAddress, opts...).ToFunc()
}

// ByToAddress orders the results by the to_address field.
func ByToAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToAddress, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByDenom orders the results by the denom field.
func ByDenom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDenom, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
