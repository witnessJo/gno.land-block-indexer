// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"gno.land-block-indexer/ent/predicate"
	"gno.land-block-indexer/ent/schema"
	"gno.land-block-indexer/ent/transaction"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (_u *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetIndex sets the "index" field.
func (_u *TransactionUpdate) SetIndex(v int) *TransactionUpdate {
	_u.mutation.ResetIndex()
	_u.mutation.SetIndex(v)
	return _u
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableIndex(v *int) *TransactionUpdate {
	if v != nil {
		_u.SetIndex(*v)
	}
	return _u
}

// AddIndex adds value to the "index" field.
func (_u *TransactionUpdate) AddIndex(v int) *TransactionUpdate {
	_u.mutation.AddIndex(v)
	return _u
}

// SetHash sets the "hash" field.
func (_u *TransactionUpdate) SetHash(v string) *TransactionUpdate {
	_u.mutation.SetHash(v)
	return _u
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableHash(v *string) *TransactionUpdate {
	if v != nil {
		_u.SetHash(*v)
	}
	return _u
}

// SetSuccess sets the "success" field.
func (_u *TransactionUpdate) SetSuccess(v bool) *TransactionUpdate {
	_u.mutation.SetSuccess(v)
	return _u
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableSuccess(v *bool) *TransactionUpdate {
	if v != nil {
		_u.SetSuccess(*v)
	}
	return _u
}

// SetBlockHeight sets the "block_height" field.
func (_u *TransactionUpdate) SetBlockHeight(v int) *TransactionUpdate {
	_u.mutation.ResetBlockHeight()
	_u.mutation.SetBlockHeight(v)
	return _u
}

// SetNillableBlockHeight sets the "block_height" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableBlockHeight(v *int) *TransactionUpdate {
	if v != nil {
		_u.SetBlockHeight(*v)
	}
	return _u
}

// AddBlockHeight adds value to the "block_height" field.
func (_u *TransactionUpdate) AddBlockHeight(v int) *TransactionUpdate {
	_u.mutation.AddBlockHeight(v)
	return _u
}

// SetGasWanted sets the "gas_wanted" field.
func (_u *TransactionUpdate) SetGasWanted(v float64) *TransactionUpdate {
	_u.mutation.ResetGasWanted()
	_u.mutation.SetGasWanted(v)
	return _u
}

// SetNillableGasWanted sets the "gas_wanted" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableGasWanted(v *float64) *TransactionUpdate {
	if v != nil {
		_u.SetGasWanted(*v)
	}
	return _u
}

// AddGasWanted adds value to the "gas_wanted" field.
func (_u *TransactionUpdate) AddGasWanted(v float64) *TransactionUpdate {
	_u.mutation.AddGasWanted(v)
	return _u
}

// SetGasUsed sets the "gas_used" field.
func (_u *TransactionUpdate) SetGasUsed(v float64) *TransactionUpdate {
	_u.mutation.ResetGasUsed()
	_u.mutation.SetGasUsed(v)
	return _u
}

// SetNillableGasUsed sets the "gas_used" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableGasUsed(v *float64) *TransactionUpdate {
	if v != nil {
		_u.SetGasUsed(*v)
	}
	return _u
}

// AddGasUsed adds value to the "gas_used" field.
func (_u *TransactionUpdate) AddGasUsed(v float64) *TransactionUpdate {
	_u.mutation.AddGasUsed(v)
	return _u
}

// SetMemo sets the "memo" field.
func (_u *TransactionUpdate) SetMemo(v string) *TransactionUpdate {
	_u.mutation.SetMemo(v)
	return _u
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableMemo(v *string) *TransactionUpdate {
	if v != nil {
		_u.SetMemo(*v)
	}
	return _u
}

// ClearMemo clears the value of the "memo" field.
func (_u *TransactionUpdate) ClearMemo() *TransactionUpdate {
	_u.mutation.ClearMemo()
	return _u
}

// SetGasFee sets the "gas_fee" field.
func (_u *TransactionUpdate) SetGasFee(v schema.GasFee) *TransactionUpdate {
	_u.mutation.SetGasFee(v)
	return _u
}

// SetNillableGasFee sets the "gas_fee" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableGasFee(v *schema.GasFee) *TransactionUpdate {
	if v != nil {
		_u.SetGasFee(*v)
	}
	return _u
}

// ClearGasFee clears the value of the "gas_fee" field.
func (_u *TransactionUpdate) ClearGasFee() *TransactionUpdate {
	_u.mutation.ClearGasFee()
	return _u
}

// SetMessages sets the "messages" field.
func (_u *TransactionUpdate) SetMessages(v []schema.Message) *TransactionUpdate {
	_u.mutation.SetMessages(v)
	return _u
}

// AppendMessages appends value to the "messages" field.
func (_u *TransactionUpdate) AppendMessages(v []schema.Message) *TransactionUpdate {
	_u.mutation.AppendMessages(v)
	return _u
}

// ClearMessages clears the value of the "messages" field.
func (_u *TransactionUpdate) ClearMessages() *TransactionUpdate {
	_u.mutation.ClearMessages()
	return _u
}

// SetResponse sets the "response" field.
func (_u *TransactionUpdate) SetResponse(v schema.Response) *TransactionUpdate {
	_u.mutation.SetResponse(v)
	return _u
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableResponse(v *schema.Response) *TransactionUpdate {
	if v != nil {
		_u.SetResponse(*v)
	}
	return _u
}

// ClearResponse clears the value of the "response" field.
func (_u *TransactionUpdate) ClearResponse() *TransactionUpdate {
	_u.mutation.ClearResponse()
	return _u
}

// Mutation returns the TransactionMutation object of the builder.
func (_u *TransactionUpdate) Mutation() *TransactionMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TransactionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TransactionUpdate) check() error {
	if v, ok := _u.mutation.Hash(); ok {
		if err := transaction.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Transaction.hash": %w`, err)}
		}
	}
	return nil
}

func (_u *TransactionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Index(); ok {
		_spec.SetField(transaction.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIndex(); ok {
		_spec.AddField(transaction.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Hash(); ok {
		_spec.SetField(transaction.FieldHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.Success(); ok {
		_spec.SetField(transaction.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := _u.mutation.BlockHeight(); ok {
		_spec.SetField(transaction.FieldBlockHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedBlockHeight(); ok {
		_spec.AddField(transaction.FieldBlockHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.GasWanted(); ok {
		_spec.SetField(transaction.FieldGasWanted, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedGasWanted(); ok {
		_spec.AddField(transaction.FieldGasWanted, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.GasUsed(); ok {
		_spec.SetField(transaction.FieldGasUsed, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedGasUsed(); ok {
		_spec.AddField(transaction.FieldGasUsed, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Memo(); ok {
		_spec.SetField(transaction.FieldMemo, field.TypeString, value)
	}
	if _u.mutation.MemoCleared() {
		_spec.ClearField(transaction.FieldMemo, field.TypeString)
	}
	if value, ok := _u.mutation.GasFee(); ok {
		_spec.SetField(transaction.FieldGasFee, field.TypeJSON, value)
	}
	if _u.mutation.GasFeeCleared() {
		_spec.ClearField(transaction.FieldGasFee, field.TypeJSON)
	}
	if value, ok := _u.mutation.Messages(); ok {
		_spec.SetField(transaction.FieldMessages, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMessages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, transaction.FieldMessages, value)
		})
	}
	if _u.mutation.MessagesCleared() {
		_spec.ClearField(transaction.FieldMessages, field.TypeJSON)
	}
	if value, ok := _u.mutation.Response(); ok {
		_spec.SetField(transaction.FieldResponse, field.TypeJSON, value)
	}
	if _u.mutation.ResponseCleared() {
		_spec.ClearField(transaction.FieldResponse, field.TypeJSON)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetIndex sets the "index" field.
func (_u *TransactionUpdateOne) SetIndex(v int) *TransactionUpdateOne {
	_u.mutation.ResetIndex()
	_u.mutation.SetIndex(v)
	return _u
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableIndex(v *int) *TransactionUpdateOne {
	if v != nil {
		_u.SetIndex(*v)
	}
	return _u
}

// AddIndex adds value to the "index" field.
func (_u *TransactionUpdateOne) AddIndex(v int) *TransactionUpdateOne {
	_u.mutation.AddIndex(v)
	return _u
}

// SetHash sets the "hash" field.
func (_u *TransactionUpdateOne) SetHash(v string) *TransactionUpdateOne {
	_u.mutation.SetHash(v)
	return _u
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableHash(v *string) *TransactionUpdateOne {
	if v != nil {
		_u.SetHash(*v)
	}
	return _u
}

// SetSuccess sets the "success" field.
func (_u *TransactionUpdateOne) SetSuccess(v bool) *TransactionUpdateOne {
	_u.mutation.SetSuccess(v)
	return _u
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableSuccess(v *bool) *TransactionUpdateOne {
	if v != nil {
		_u.SetSuccess(*v)
	}
	return _u
}

// SetBlockHeight sets the "block_height" field.
func (_u *TransactionUpdateOne) SetBlockHeight(v int) *TransactionUpdateOne {
	_u.mutation.ResetBlockHeight()
	_u.mutation.SetBlockHeight(v)
	return _u
}

// SetNillableBlockHeight sets the "block_height" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableBlockHeight(v *int) *TransactionUpdateOne {
	if v != nil {
		_u.SetBlockHeight(*v)
	}
	return _u
}

// AddBlockHeight adds value to the "block_height" field.
func (_u *TransactionUpdateOne) AddBlockHeight(v int) *TransactionUpdateOne {
	_u.mutation.AddBlockHeight(v)
	return _u
}

// SetGasWanted sets the "gas_wanted" field.
func (_u *TransactionUpdateOne) SetGasWanted(v float64) *TransactionUpdateOne {
	_u.mutation.ResetGasWanted()
	_u.mutation.SetGasWanted(v)
	return _u
}

// SetNillableGasWanted sets the "gas_wanted" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableGasWanted(v *float64) *TransactionUpdateOne {
	if v != nil {
		_u.SetGasWanted(*v)
	}
	return _u
}

// AddGasWanted adds value to the "gas_wanted" field.
func (_u *TransactionUpdateOne) AddGasWanted(v float64) *TransactionUpdateOne {
	_u.mutation.AddGasWanted(v)
	return _u
}

// SetGasUsed sets the "gas_used" field.
func (_u *TransactionUpdateOne) SetGasUsed(v float64) *TransactionUpdateOne {
	_u.mutation.ResetGasUsed()
	_u.mutation.SetGasUsed(v)
	return _u
}

// SetNillableGasUsed sets the "gas_used" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableGasUsed(v *float64) *TransactionUpdateOne {
	if v != nil {
		_u.SetGasUsed(*v)
	}
	return _u
}

// AddGasUsed adds value to the "gas_used" field.
func (_u *TransactionUpdateOne) AddGasUsed(v float64) *TransactionUpdateOne {
	_u.mutation.AddGasUsed(v)
	return _u
}

// SetMemo sets the "memo" field.
func (_u *TransactionUpdateOne) SetMemo(v string) *TransactionUpdateOne {
	_u.mutation.SetMemo(v)
	return _u
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableMemo(v *string) *TransactionUpdateOne {
	if v != nil {
		_u.SetMemo(*v)
	}
	return _u
}

// ClearMemo clears the value of the "memo" field.
func (_u *TransactionUpdateOne) ClearMemo() *TransactionUpdateOne {
	_u.mutation.ClearMemo()
	return _u
}

// SetGasFee sets the "gas_fee" field.
func (_u *TransactionUpdateOne) SetGasFee(v schema.GasFee) *TransactionUpdateOne {
	_u.mutation.SetGasFee(v)
	return _u
}

// SetNillableGasFee sets the "gas_fee" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableGasFee(v *schema.GasFee) *TransactionUpdateOne {
	if v != nil {
		_u.SetGasFee(*v)
	}
	return _u
}

// ClearGasFee clears the value of the "gas_fee" field.
func (_u *TransactionUpdateOne) ClearGasFee() *TransactionUpdateOne {
	_u.mutation.ClearGasFee()
	return _u
}

// SetMessages sets the "messages" field.
func (_u *TransactionUpdateOne) SetMessages(v []schema.Message) *TransactionUpdateOne {
	_u.mutation.SetMessages(v)
	return _u
}

// AppendMessages appends value to the "messages" field.
func (_u *TransactionUpdateOne) AppendMessages(v []schema.Message) *TransactionUpdateOne {
	_u.mutation.AppendMessages(v)
	return _u
}

// ClearMessages clears the value of the "messages" field.
func (_u *TransactionUpdateOne) ClearMessages() *TransactionUpdateOne {
	_u.mutation.ClearMessages()
	return _u
}

// SetResponse sets the "response" field.
func (_u *TransactionUpdateOne) SetResponse(v schema.Response) *TransactionUpdateOne {
	_u.mutation.SetResponse(v)
	return _u
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableResponse(v *schema.Response) *TransactionUpdateOne {
	if v != nil {
		_u.SetResponse(*v)
	}
	return _u
}

// ClearResponse clears the value of the "response" field.
func (_u *TransactionUpdateOne) ClearResponse() *TransactionUpdateOne {
	_u.mutation.ClearResponse()
	return _u
}

// Mutation returns the TransactionMutation object of the builder.
func (_u *TransactionUpdateOne) Mutation() *TransactionMutation {
	return _u.mutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (_u *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Transaction entity.
func (_u *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TransactionUpdateOne) check() error {
	if v, ok := _u.mutation.Hash(); ok {
		if err := transaction.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Transaction.hash": %w`, err)}
		}
	}
	return nil
}

func (_u *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Index(); ok {
		_spec.SetField(transaction.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIndex(); ok {
		_spec.AddField(transaction.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Hash(); ok {
		_spec.SetField(transaction.FieldHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.Success(); ok {
		_spec.SetField(transaction.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := _u.mutation.BlockHeight(); ok {
		_spec.SetField(transaction.FieldBlockHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedBlockHeight(); ok {
		_spec.AddField(transaction.FieldBlockHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.GasWanted(); ok {
		_spec.SetField(transaction.FieldGasWanted, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedGasWanted(); ok {
		_spec.AddField(transaction.FieldGasWanted, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.GasUsed(); ok {
		_spec.SetField(transaction.FieldGasUsed, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedGasUsed(); ok {
		_spec.AddField(transaction.FieldGasUsed, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Memo(); ok {
		_spec.SetField(transaction.FieldMemo, field.TypeString, value)
	}
	if _u.mutation.MemoCleared() {
		_spec.ClearField(transaction.FieldMemo, field.TypeString)
	}
	if value, ok := _u.mutation.GasFee(); ok {
		_spec.SetField(transaction.FieldGasFee, field.TypeJSON, value)
	}
	if _u.mutation.GasFeeCleared() {
		_spec.ClearField(transaction.FieldGasFee, field.TypeJSON)
	}
	if value, ok := _u.mutation.Messages(); ok {
		_spec.SetField(transaction.FieldMessages, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMessages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, transaction.FieldMessages, value)
		})
	}
	if _u.mutation.MessagesCleared() {
		_spec.ClearField(transaction.FieldMessages, field.TypeJSON)
	}
	if value, ok := _u.mutation.Response(); ok {
		_spec.SetField(transaction.FieldResponse, field.TypeJSON, value)
	}
	if _u.mutation.ResponseCleared() {
		_spec.ClearField(transaction.FieldResponse, field.TypeJSON)
	}
	_node = &Transaction{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
