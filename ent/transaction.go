// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gno.land-block-indexer/ent/block"
	"gno.land-block-indexer/ent/schema"
	"gno.land-block-indexer/ent/transaction"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Index of the transaction in the block
	Index int `json:"index,omitempty"`
	// Hash of the transaction
	Hash string `json:"hash,omitempty"`
	// Whether the transaction was successful
	Success bool `json:"success,omitempty"`
	// Height of the block containing the transaction
	BlockHeight int `json:"block_height,omitempty"`
	// Gas wanted for the transaction
	GasWanted float64 `json:"gas_wanted,omitempty"`
	// Gas used by the transaction
	GasUsed float64 `json:"gas_used,omitempty"`
	// Memo of the transaction
	Memo string `json:"memo,omitempty"`
	// Gas fee paid for the transaction
	GasFee schema.GasFee `json:"gas_fee,omitempty"`
	// Messages in the transaction
	Messages []schema.Message `json:"messages,omitempty"`
	// Response of the transaction
	Response schema.Response `json:"response,omitempty"`
	// Creation time of the transaction
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges              TransactionEdges `json:"edges"`
	block_transactions *int
	selectValues       sql.SelectValues
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// Block holds the value of the block edge.
	Block *Block `json:"block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) BlockOrErr() (*Block, error) {
	if e.Block != nil {
		return e.Block, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: block.Label}
	}
	return nil, &NotLoadedError{edge: "block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldGasFee, transaction.FieldMessages, transaction.FieldResponse:
			values[i] = new([]byte)
		case transaction.FieldSuccess:
			values[i] = new(sql.NullBool)
		case transaction.FieldGasWanted, transaction.FieldGasUsed:
			values[i] = new(sql.NullFloat64)
		case transaction.FieldID, transaction.FieldIndex, transaction.FieldBlockHeight:
			values[i] = new(sql.NullInt64)
		case transaction.FieldHash, transaction.FieldMemo:
			values[i] = new(sql.NullString)
		case transaction.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case transaction.ForeignKeys[0]: // block_transactions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (_m *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case transaction.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				_m.Index = int(value.Int64)
			}
		case transaction.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				_m.Hash = value.String
			}
		case transaction.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				_m.Success = value.Bool
			}
		case transaction.FieldBlockHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field block_height", values[i])
			} else if value.Valid {
				_m.BlockHeight = int(value.Int64)
			}
		case transaction.FieldGasWanted:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field gas_wanted", values[i])
			} else if value.Valid {
				_m.GasWanted = value.Float64
			}
		case transaction.FieldGasUsed:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field gas_used", values[i])
			} else if value.Valid {
				_m.GasUsed = value.Float64
			}
		case transaction.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				_m.Memo = value.String
			}
		case transaction.FieldGasFee:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field gas_fee", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.GasFee); err != nil {
					return fmt.Errorf("unmarshal field gas_fee: %w", err)
				}
			}
		case transaction.FieldMessages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field messages", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Messages); err != nil {
					return fmt.Errorf("unmarshal field messages: %w", err)
				}
			}
		case transaction.FieldResponse:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field response", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Response); err != nil {
					return fmt.Errorf("unmarshal field response: %w", err)
				}
			}
		case transaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case transaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field block_transactions", value)
			} else if value.Valid {
				_m.block_transactions = new(int)
				*_m.block_transactions = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transaction.
// This includes values selected through modifiers, order, etc.
func (_m *Transaction) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBlock queries the "block" edge of the Transaction entity.
func (_m *Transaction) QueryBlock() *BlockQuery {
	return NewTransactionClient(_m.config).QueryBlock(_m)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Transaction) Unwrap() *Transaction {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", _m.Index))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(_m.Hash)
	builder.WriteString(", ")
	builder.WriteString("success=")
	builder.WriteString(fmt.Sprintf("%v", _m.Success))
	builder.WriteString(", ")
	builder.WriteString("block_height=")
	builder.WriteString(fmt.Sprintf("%v", _m.BlockHeight))
	builder.WriteString(", ")
	builder.WriteString("gas_wanted=")
	builder.WriteString(fmt.Sprintf("%v", _m.GasWanted))
	builder.WriteString(", ")
	builder.WriteString("gas_used=")
	builder.WriteString(fmt.Sprintf("%v", _m.GasUsed))
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(_m.Memo)
	builder.WriteString(", ")
	builder.WriteString("gas_fee=")
	builder.WriteString(fmt.Sprintf("%v", _m.GasFee))
	builder.WriteString(", ")
	builder.WriteString("messages=")
	builder.WriteString(fmt.Sprintf("%v", _m.Messages))
	builder.WriteString(", ")
	builder.WriteString("response=")
	builder.WriteString(fmt.Sprintf("%v", _m.Response))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction
