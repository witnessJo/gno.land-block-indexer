// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gno.land-block-indexer/ent/predicate"
	"gno.land-block-indexer/ent/restorehistory"
)

// RestoreHistoryUpdate is the builder for updating RestoreHistory entities.
type RestoreHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *RestoreHistoryMutation
}

// Where appends a list predicates to the RestoreHistoryUpdate builder.
func (_u *RestoreHistoryUpdate) Where(ps ...predicate.RestoreHistory) *RestoreHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetRestoreRangeStart sets the "restore_range_start" field.
func (_u *RestoreHistoryUpdate) SetRestoreRangeStart(v int) *RestoreHistoryUpdate {
	_u.mutation.ResetRestoreRangeStart()
	_u.mutation.SetRestoreRangeStart(v)
	return _u
}

// SetNillableRestoreRangeStart sets the "restore_range_start" field if the given value is not nil.
func (_u *RestoreHistoryUpdate) SetNillableRestoreRangeStart(v *int) *RestoreHistoryUpdate {
	if v != nil {
		_u.SetRestoreRangeStart(*v)
	}
	return _u
}

// AddRestoreRangeStart adds value to the "restore_range_start" field.
func (_u *RestoreHistoryUpdate) AddRestoreRangeStart(v int) *RestoreHistoryUpdate {
	_u.mutation.AddRestoreRangeStart(v)
	return _u
}

// SetRestoreRangeEnd sets the "restore_range_end" field.
func (_u *RestoreHistoryUpdate) SetRestoreRangeEnd(v int) *RestoreHistoryUpdate {
	_u.mutation.ResetRestoreRangeEnd()
	_u.mutation.SetRestoreRangeEnd(v)
	return _u
}

// SetNillableRestoreRangeEnd sets the "restore_range_end" field if the given value is not nil.
func (_u *RestoreHistoryUpdate) SetNillableRestoreRangeEnd(v *int) *RestoreHistoryUpdate {
	if v != nil {
		_u.SetRestoreRangeEnd(*v)
	}
	return _u
}

// AddRestoreRangeEnd adds value to the "restore_range_end" field.
func (_u *RestoreHistoryUpdate) AddRestoreRangeEnd(v int) *RestoreHistoryUpdate {
	_u.mutation.AddRestoreRangeEnd(v)
	return _u
}

// SetBeingBlock sets the "being_block" field.
func (_u *RestoreHistoryUpdate) SetBeingBlock(v int) *RestoreHistoryUpdate {
	_u.mutation.ResetBeingBlock()
	_u.mutation.SetBeingBlock(v)
	return _u
}

// SetNillableBeingBlock sets the "being_block" field if the given value is not nil.
func (_u *RestoreHistoryUpdate) SetNillableBeingBlock(v *int) *RestoreHistoryUpdate {
	if v != nil {
		_u.SetBeingBlock(*v)
	}
	return _u
}

// AddBeingBlock adds value to the "being_block" field.
func (_u *RestoreHistoryUpdate) AddBeingBlock(v int) *RestoreHistoryUpdate {
	_u.mutation.AddBeingBlock(v)
	return _u
}

// Mutation returns the RestoreHistoryMutation object of the builder.
func (_u *RestoreHistoryUpdate) Mutation() *RestoreHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RestoreHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RestoreHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RestoreHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RestoreHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *RestoreHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(restorehistory.Table, restorehistory.Columns, sqlgraph.NewFieldSpec(restorehistory.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RestoreRangeStart(); ok {
		_spec.SetField(restorehistory.FieldRestoreRangeStart, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRestoreRangeStart(); ok {
		_spec.AddField(restorehistory.FieldRestoreRangeStart, field.TypeInt, value)
	}
	if value, ok := _u.mutation.RestoreRangeEnd(); ok {
		_spec.SetField(restorehistory.FieldRestoreRangeEnd, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRestoreRangeEnd(); ok {
		_spec.AddField(restorehistory.FieldRestoreRangeEnd, field.TypeInt, value)
	}
	if value, ok := _u.mutation.BeingBlock(); ok {
		_spec.SetField(restorehistory.FieldBeingBlock, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedBeingBlock(); ok {
		_spec.AddField(restorehistory.FieldBeingBlock, field.TypeInt, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restorehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RestoreHistoryUpdateOne is the builder for updating a single RestoreHistory entity.
type RestoreHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RestoreHistoryMutation
}

// SetRestoreRangeStart sets the "restore_range_start" field.
func (_u *RestoreHistoryUpdateOne) SetRestoreRangeStart(v int) *RestoreHistoryUpdateOne {
	_u.mutation.ResetRestoreRangeStart()
	_u.mutation.SetRestoreRangeStart(v)
	return _u
}

// SetNillableRestoreRangeStart sets the "restore_range_start" field if the given value is not nil.
func (_u *RestoreHistoryUpdateOne) SetNillableRestoreRangeStart(v *int) *RestoreHistoryUpdateOne {
	if v != nil {
		_u.SetRestoreRangeStart(*v)
	}
	return _u
}

// AddRestoreRangeStart adds value to the "restore_range_start" field.
func (_u *RestoreHistoryUpdateOne) AddRestoreRangeStart(v int) *RestoreHistoryUpdateOne {
	_u.mutation.AddRestoreRangeStart(v)
	return _u
}

// SetRestoreRangeEnd sets the "restore_range_end" field.
func (_u *RestoreHistoryUpdateOne) SetRestoreRangeEnd(v int) *RestoreHistoryUpdateOne {
	_u.mutation.ResetRestoreRangeEnd()
	_u.mutation.SetRestoreRangeEnd(v)
	return _u
}

// SetNillableRestoreRangeEnd sets the "restore_range_end" field if the given value is not nil.
func (_u *RestoreHistoryUpdateOne) SetNillableRestoreRangeEnd(v *int) *RestoreHistoryUpdateOne {
	if v != nil {
		_u.SetRestoreRangeEnd(*v)
	}
	return _u
}

// AddRestoreRangeEnd adds value to the "restore_range_end" field.
func (_u *RestoreHistoryUpdateOne) AddRestoreRangeEnd(v int) *RestoreHistoryUpdateOne {
	_u.mutation.AddRestoreRangeEnd(v)
	return _u
}

// SetBeingBlock sets the "being_block" field.
func (_u *RestoreHistoryUpdateOne) SetBeingBlock(v int) *RestoreHistoryUpdateOne {
	_u.mutation.ResetBeingBlock()
	_u.mutation.SetBeingBlock(v)
	return _u
}

// SetNillableBeingBlock sets the "being_block" field if the given value is not nil.
func (_u *RestoreHistoryUpdateOne) SetNillableBeingBlock(v *int) *RestoreHistoryUpdateOne {
	if v != nil {
		_u.SetBeingBlock(*v)
	}
	return _u
}

// AddBeingBlock adds value to the "being_block" field.
func (_u *RestoreHistoryUpdateOne) AddBeingBlock(v int) *RestoreHistoryUpdateOne {
	_u.mutation.AddBeingBlock(v)
	return _u
}

// Mutation returns the RestoreHistoryMutation object of the builder.
func (_u *RestoreHistoryUpdateOne) Mutation() *RestoreHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the RestoreHistoryUpdate builder.
func (_u *RestoreHistoryUpdateOne) Where(ps ...predicate.RestoreHistory) *RestoreHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RestoreHistoryUpdateOne) Select(field string, fields ...string) *RestoreHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RestoreHistory entity.
func (_u *RestoreHistoryUpdateOne) Save(ctx context.Context) (*RestoreHistory, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RestoreHistoryUpdateOne) SaveX(ctx context.Context) *RestoreHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RestoreHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RestoreHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *RestoreHistoryUpdateOne) sqlSave(ctx context.Context) (_node *RestoreHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(restorehistory.Table, restorehistory.Columns, sqlgraph.NewFieldSpec(restorehistory.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RestoreHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, restorehistory.FieldID)
		for _, f := range fields {
			if !restorehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != restorehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RestoreRangeStart(); ok {
		_spec.SetField(restorehistory.FieldRestoreRangeStart, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRestoreRangeStart(); ok {
		_spec.AddField(restorehistory.FieldRestoreRangeStart, field.TypeInt, value)
	}
	if value, ok := _u.mutation.RestoreRangeEnd(); ok {
		_spec.SetField(restorehistory.FieldRestoreRangeEnd, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRestoreRangeEnd(); ok {
		_spec.AddField(restorehistory.FieldRestoreRangeEnd, field.TypeInt, value)
	}
	if value, ok := _u.mutation.BeingBlock(); ok {
		_spec.SetField(restorehistory.FieldBeingBlock, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedBeingBlock(); ok {
		_spec.AddField(restorehistory.FieldBeingBlock, field.TypeInt, value)
	}
	_node = &RestoreHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restorehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
