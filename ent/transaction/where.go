// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"gno.land-block-indexer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldIndex, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldHash, v))
}

// Success applies equality check predicate on the "success" field. It's identical to SuccessEQ.
func Success(v bool) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldSuccess, v))
}

// BlockHeight applies equality check predicate on the "block_height" field. It's identical to BlockHeightEQ.
func BlockHeight(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldBlockHeight, v))
}

// GasWanted applies equality check predicate on the "gas_wanted" field. It's identical to GasWantedEQ.
func GasWanted(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldGasWanted, v))
}

// GasUsed applies equality check predicate on the "gas_used" field. It's identical to GasUsedEQ.
func GasUsed(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldGasUsed, v))
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMemo, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldIndex, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldHash, v))
}

// SuccessEQ applies the EQ predicate on the "success" field.
func SuccessEQ(v bool) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldSuccess, v))
}

// SuccessNEQ applies the NEQ predicate on the "success" field.
func SuccessNEQ(v bool) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldSuccess, v))
}

// BlockHeightEQ applies the EQ predicate on the "block_height" field.
func BlockHeightEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldBlockHeight, v))
}

// BlockHeightNEQ applies the NEQ predicate on the "block_height" field.
func BlockHeightNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldBlockHeight, v))
}

// BlockHeightIn applies the In predicate on the "block_height" field.
func BlockHeightIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldBlockHeight, vs...))
}

// BlockHeightNotIn applies the NotIn predicate on the "block_height" field.
func BlockHeightNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldBlockHeight, vs...))
}

// BlockHeightGT applies the GT predicate on the "block_height" field.
func BlockHeightGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldBlockHeight, v))
}

// BlockHeightGTE applies the GTE predicate on the "block_height" field.
func BlockHeightGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldBlockHeight, v))
}

// BlockHeightLT applies the LT predicate on the "block_height" field.
func BlockHeightLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldBlockHeight, v))
}

// BlockHeightLTE applies the LTE predicate on the "block_height" field.
func BlockHeightLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldBlockHeight, v))
}

// GasWantedEQ applies the EQ predicate on the "gas_wanted" field.
func GasWantedEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldGasWanted, v))
}

// GasWantedNEQ applies the NEQ predicate on the "gas_wanted" field.
func GasWantedNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldGasWanted, v))
}

// GasWantedIn applies the In predicate on the "gas_wanted" field.
func GasWantedIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldGasWanted, vs...))
}

// GasWantedNotIn applies the NotIn predicate on the "gas_wanted" field.
func GasWantedNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldGasWanted, vs...))
}

// GasWantedGT applies the GT predicate on the "gas_wanted" field.
func GasWantedGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldGasWanted, v))
}

// GasWantedGTE applies the GTE predicate on the "gas_wanted" field.
func GasWantedGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldGasWanted, v))
}

// GasWantedLT applies the LT predicate on the "gas_wanted" field.
func GasWantedLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldGasWanted, v))
}

// GasWantedLTE applies the LTE predicate on the "gas_wanted" field.
func GasWantedLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldGasWanted, v))
}

// GasUsedEQ applies the EQ predicate on the "gas_used" field.
func GasUsedEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldGasUsed, v))
}

// GasUsedNEQ applies the NEQ predicate on the "gas_used" field.
func GasUsedNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldGasUsed, v))
}

// GasUsedIn applies the In predicate on the "gas_used" field.
func GasUsedIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldGasUsed, vs...))
}

// GasUsedNotIn applies the NotIn predicate on the "gas_used" field.
func GasUsedNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldGasUsed, vs...))
}

// GasUsedGT applies the GT predicate on the "gas_used" field.
func GasUsedGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldGasUsed, v))
}

// GasUsedGTE applies the GTE predicate on the "gas_used" field.
func GasUsedGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldGasUsed, v))
}

// GasUsedLT applies the LT predicate on the "gas_used" field.
func GasUsedLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldGasUsed, v))
}

// GasUsedLTE applies the LTE predicate on the "gas_used" field.
func GasUsedLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldGasUsed, v))
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMemo, v))
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldMemo, v))
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldMemo, vs...))
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldMemo, vs...))
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldMemo, v))
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldMemo, v))
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldMemo, v))
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldMemo, v))
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldMemo, v))
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldMemo, v))
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldMemo, v))
}

// MemoIsNil applies the IsNil predicate on the "memo" field.
func MemoIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldMemo))
}

// MemoNotNil applies the NotNil predicate on the "memo" field.
func MemoNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldMemo))
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldMemo, v))
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldMemo, v))
}

// GasFeeIsNil applies the IsNil predicate on the "gas_fee" field.
func GasFeeIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldGasFee))
}

// GasFeeNotNil applies the NotNil predicate on the "gas_fee" field.
func GasFeeNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldGasFee))
}

// MessagesIsNil applies the IsNil predicate on the "messages" field.
func MessagesIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldMessages))
}

// MessagesNotNil applies the NotNil predicate on the "messages" field.
func MessagesNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldMessages))
}

// ResponseIsNil applies the IsNil predicate on the "response" field.
func ResponseIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldResponse))
}

// ResponseNotNil applies the NotNil predicate on the "response" field.
func ResponseNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldResponse))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
