// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldSuccess holds the string denoting the success field in the database.
	FieldSuccess = "success"
	// FieldBlockHeight holds the string denoting the block_height field in the database.
	FieldBlockHeight = "block_height"
	// FieldGasWanted holds the string denoting the gas_wanted field in the database.
	FieldGasWanted = "gas_wanted"
	// FieldGasUsed holds the string denoting the gas_used field in the database.
	FieldGasUsed = "gas_used"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// FieldGasFee holds the string denoting the gas_fee field in the database.
	FieldGasFee = "gas_fee"
	// FieldMessages holds the string denoting the messages field in the database.
	FieldMessages = "messages"
	// FieldResponse holds the string denoting the response field in the database.
	FieldResponse = "response"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldIndex,
	FieldHash,
	FieldSuccess,
	FieldBlockHeight,
	FieldGasWanted,
	FieldGasUsed,
	FieldMemo,
	FieldGasFee,
	FieldMessages,
	FieldResponse,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func(string) error
	// DefaultSuccess holds the default value on creation for the "success" field.
	DefaultSuccess bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Transaction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// BySuccess orders the results by the success field.
func BySuccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccess, opts...).ToFunc()
}

// ByBlockHeight orders the results by the block_height field.
func ByBlockHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockHeight, opts...).ToFunc()
}

// ByGasWanted orders the results by the gas_wanted field.
func ByGasWanted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasWanted, opts...).ToFunc()
}

// ByGasUsed orders the results by the gas_used field.
func ByGasUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasUsed, opts...).ToFunc()
}

// ByMemo orders the results by the memo field.
func ByMemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemo, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
